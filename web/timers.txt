timers


I use three timers:

ALLEGRO_TIMER * fps_timer;
ALLEGRO_TIMER * sec_timer;
ALLEGRO_TIMER * mnu_timer;



fps_timer is used to control the speed of the game

sec_timer is used to count the actual frames per second

mnu_timer is used to control the speed of the menu




int initial_setup(void)
{

   // create timers
   fps_timer = al_create_timer(1/(float)passcount_timer_fps);
   sec_timer = al_create_timer(1);
   mnu_timer = al_create_timer(.01);

   // register timer event source
   al_register_event_source(event_queue, al_get_timer_event_source(mnu_timer));

   // start timers
   al_start_timer(fps_timer);
   al_start_timer(sec_timer);
   al_start_timer(mnu_timer);
...



------------------------------------
--- mnu_timer ---------------------- 
------------------------------------

The speed of the menu loop is controlled by mnu_timer.

When the menu is running, it is running a loop that processes the menu and also processes the logo animation.

In this loop proc_controller() is called.

If the global variable 'game_exit' == 1, then proc_controller() knows the menu is running.

In that case proc_controller() will block until it gets a timer event.

int proc_controllers()
{
   int ret = 0;
   int done = 0;
   int menu_timer_wait = 1;

   while (!done)
   {
      done = 1; // default
      while (!al_is_event_queue_empty(event_queue))
      {
         ALLEGRO_EVENT ev;
         if (ev.type == ALLEGRO_EVENT_TIMER) menu_timer_wait = 0;
         if (al_get_next_event(event_queue, &ev)) ret = proc_events(ev, ret);
      }
      if (game_exit) // if called from menu only do key check for active local player
      {
          clear_keys(active_local_player);
          player_key_check(active_local_player);
          function_key_check();
          if (menu_timer_wait) done = 0;
      }
   }
   return ret;
}



------------------------------------
--- sec_timer ---------------------- 
------------------------------------

sec_timer is used to count the actual frames per second and the number of skipped frames in the last second

the algorithm uses the following global varaibles:

int actual_fps;
int last_frames_skipped = 0;
int frames_skipped_last_second;
int last_fps_passcount = 0;
int passcount;
players1[active_local_player].frames_skipped


void proc_frame_delay(void)
{
   if (al_get_timer_count(sec_timer) > 0)
   {
      al_set_timer_count(sec_timer, 0); // reset_second_timer
      actual_fps = passcount - last_fps_passcount;
      last_fps_passcount = passcount;
      frames_skipped_last_second = (players1[active_local_player].frames_skipped - last_frames_skipped);
      last_frames_skipped = players1[active_local_player].frames_skipped;
   }
...

  
   
------------------------------------
--- fps_timer ---------------------- 
------------------------------------
   
fps_timer is used to control the speed of the game
   
the global variable 'frame_speed' sets the frame rate of the game
int frame_speed= 40;
   
The timer is set as a reciprocal of fps like this:
al_set_timer_speed(fps_timer, 1/(float)frame_speed);


 














