---------------------------------------------------------------------
---------------------------------------------------------------------
---- Setting up Allegro 5.2.4 developement environmnet on Linux -----
---------------------------------------------------------------------
---------------------------------------------------------------------


-------------------------------------------------------------------------------------------------
Note: this is the first time I did this and there are many false starts and unnecessary steps.

Skip down further to see the second and third times, which are must more concise and to the point.

2nd time: 20180425 (ubuntu 16.04 fresh install)

3rd time: 20180428 (ubuntu 18.04 fresh install)
-------------------------------------------------------------------------------------------------



Start with a clean slate...

Downloaded and did a fresh install of ubuntu 16.04.4

In system settings -> system -> details

it prompted to dowbload and install 65M of updates then reboot

checked 'software and updates' all 4 repos were already selected

changed server from canada to US (us.archive.ubuntu.com)

sudo apt-get update

sudo apt-get install openssh-server (to work remotely)



ubuntu guide

min
$ sudo apt-get install libgl1-mesa-dev libglu1-mesa-dev cmake build-essential make libxcursor-dev
all
$ sudo apt-get install -y cmake g++ freeglut3-dev libxcursor-dev libpng12-dev libjpeg-dev libfreetype6-dev libgtk2.0-dev libasound2-dev libpulse-dev libopenal-dev libflac-dev libdumb1-dev libvorbis-dev libphysfs-dev

debian guide:

Required Dependencies
apt-get install build-essential git cmake cmake-curses-gui xorg-dev libgl1-mesa-dev libglu-dev

Optional Dependencies
apt-get install libpng-dev libcurl4-openssl-dev libfreetype6-dev libjpeg-dev libvorbis-dev libopenal-dev libphysfs-dev \
 libgtk2.0-dev libasound-dev libpulse-dev libflac-dev libdumb1-dev






I did the debian guide and ran these:

sudo apt-get install build-essential git cmake cmake-curses-gui xorg-dev libgl1-mesa-dev libglu-dev

sudo apt-get install libpng-dev libcurl4-openssl-dev libfreetype6-dev libjpeg-dev libvorbis-dev libopenal-dev libphysfs-dev  libgtk2.0-dev libasound-dev libpulse-dev libflac-dev libdumb1-dev


---------------------------------------------------------
Get the sources with git
---------------------------------------------------------
in a terminal, pwd = /home/m

git clone https://github.com/liballeg/allegro5.git

done...


---------------------------------------------------------
make a build dir and configure with cmake
---------------------------------------------------------

mkdir build; cd build
Running CMake
Now for the fun part. You have a couple options, you can use cmake directly, use the bundled ccmake (curses) gui, or a Qt based graphical interface. I normally use ccmake, so that is what I'm going to explain here.


ccmake -DCMAKE_INSTALL_PREFIX=/usr ..
ccmake allows you to specify build settings on the command line, as well as inside the curses interface. Here I've told it to set the install prefix (where allegro is going to install to) to /usr. Why? It's cuts out a couple steps, adding /usr/local/lib to /etc/ld.so.conf and running ldconfig as root.

Once you've run that, press "c" twice, and then "g". You should now be back to a console.

You can however change any setting you like in the list, like disabling certain optional features. If you want to build static libraries, set SHARED to OFF.

Compiling Allegro
Now its time to get down to it. Time to run make.

make
Yes it really is that easy. You may have to wait a few minutes for this to finish.

Installing Allegro
Almost done. Time to install. If you left the CMAKE_INSTALL_PREFIX as default, or used my suggestion to install to /usr, you are going to want to install as root, either using sudo, or su.

sudo make install
Congratulations, you now have Allegro 5 installed.


wow that was easy....



---------------------


im going to try making the static version


set
shared:off

monolith on

prefer static deps:????  on




color off
dsound off
embed off
flac off
frameworks off

aqueue off
d3d off
docs:off
demo:off
example:off
image webp off
ogg video off
opus off
open sl off
physfs off

release logging off
shaders d3d off
shaders gl off
tests off
want video off
vorbis off


it made:
liballegro_monolith-static.a

and also pkgcfg...


gave up on the static version...link problems





---------------------------------------------------------
Code::Blocks
---------------------------------------------------------
Ubuntu 16.04.4 in Software Manager version 13.12

that's pretty old...lets see what else I can find...

To install Code::Blocks from PPA, open a terminal and type:

sudo add-apt-repository ppa:damien-moore/codeblocks-stable
sudo apt-get update
sudo apt-get install codeblocks codeblocks-contrib

Current stable version of Code::Blocks IDE (16.01)


---------------------------------------------------------
Set up samba share on desktop for project files
---------------------------------------------------------

made a folder on the desktop 'pm_client7' and shared it
prompted to install samba, did it with no problems
needed to restart session
shared again, checked:
'allow other to create and delete files in this folder'
'guest access (for people without an account)'
clicked 'create share'
chose 'set permissions automatically'


---------------------------------------------------------
Install libnet
---------------------------------------------------------
- from my local copy of the sources
from a terminal go to the folder 'libnet' in the game folder
'make lib'
'sudo make install'
(puts libnet.h in /usr/include/)
(puts libnet.a in /usr/lib/x86_64-linux-gnu/)


---------------------------------------------------------
Linker setting for my project
---------------------------------------------------------
-lallegro_monolith
-lz
-lnet
-lpthread



I have allegro 5.2.5...
what can i do to get 5.2.4...

git checkout 5.2.4
git pull --rebase origin 5.2.4

configured, recompiled allegro..
re complied my project
now version says 5.2.4.1


By default you will be on the master branch. You can change the branch from your working tree like this:
git checkout 5.0
git checkout 4.4
git checkout master

Usage
A quick reminder how to use git.

To get the repository:

git clone https://github.com/liballeg/allegro5.git
Remember to tell git your name and email address:

git config --global user.name "My Name"
git config --global user.email "USERNAME@example.net"
To make sure you're in the right branch and have the latest changes:

cd allegro
git checkout master
git pull --rebase origin master


i have gcc 5.4.0
i should have 7.2.4



How to switch GCC version using update-alternatives
 Ashwin   Uncategorized   February 26, 2015  1 Minute
Multiple versions of GCC can be installed and used on Ubuntu as described here. The update-alternatives tool makes it easy to switch between multiple versions of GCC.

On Ubuntu, gcc and g++ are just symbolic links to the actual binaries of a specific version of GCC. By switching the version, invoking gcc will execute the particular version of the compiler binary that you wish. You can make any of these version as the default at any time effortlessly.

As an example, I had installed GCC version 4.8 from the Ubuntu repositories. This was the default version of GCC, so gcc was a symlink to gcc-4.8 binary. Wanting to use some new C++11 features I installed version 4.9 of GCC. This compiler can be invoked using gcc-4.9. I now want to switch the default gcc to invoke gcc-4.9. I also want the freedom to switch back 4.8 as the default whenever I want. You can switch the symlinks yourself manually, but using this tool makes it easy and clean.

Let us begin:

Decide which set of symbolic links you want to group together as one unit. I like to switch /usr/bin/gcc and /usr/bin/g++ together.
Pass update-alternatives the first version of these symbolic links. Here I will inform about the 4.8 version of these tools and links:

1
$ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 100 --slave /usr/bin/g++ g++ /usr/bin/g++-4.8
Here, we have provided the gcc as the master and g++ as slave. Multiple slaves can be appended along with master. When master symbolic link is changed, the slaves will be changed too.

Pass the second version of these tools to be recorded:
1
$ sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 50 --slave /usr/bin/g++ g++ /usr/bin/g++-4.9
Now you can switch between these versions by using:
1
$ sudo update-alternatives --config gcc
Tried with: Ubuntu 14.04


sudo add-apt-repository ppa:jonathonf/gcc-7.2
sudo apt-get update
sudo apt-get install gcc-7
sudo apt-get install g++-7


or alternatively ubuntu 17.10 is supposed to come with 7.2

now I have it, but not linked...


gcc still shows 5.4
gcc-7 shows 7.2


gcc -v
g++ -v
Okay, so that part is fairly simple. The tricky part is that when you issue the command GCC it is actually a sybolic link to which ever version of GCC you are using. What this means is we can create a symbolic link from GCC to whichever version of GCC we want.

You can see the symbolic link :
ls -la /usr/bin | grep gcc-4.4
ls -la /usr/bin | grep g++-4.4
So what we need to do is remove the GCC symlink and the G++ symlink and then recreate them linked to GCC 4.3 and G++ 4.3:
rm /usr/bin/gcc
rm /usr/bin/g++

ln -s /usr/bin/gcc-4.3 /usr/bin/gcc
ln -s /usr/bin/g++-4.3 /usr/bin/g++
Now if we check the symbolic links again we will see GCC & G++ are now linked to GCC 4.3 and G++ 4.3:
ls -la /usr/bin/ | grep gcc
ls -la /usr/bin/ | grep g++
Finally we can check our GCC -v again and make sure we are using the correct version:
gcc -v
g++ -v

ls -la /usr/bin | grep gcc-7
ls -la /usr/bin | grep g++-7

rm /usr/bin/gcc
rm /usr/bin/g++

ln -s /usr/bin/gcc-7 /usr/bin/gcc
ln -s /usr/bin/g++-7 /usr/bin/g++

erased cmake files from my build dir
and rebuilt allegro

------------------------------------

I am using the dynamic monolith version

build it again, but remove open al and some others

ccmake -DCMAKE_INSTALL_PREFIX=/usr ..

build type Release

off:
color
d3d
demo
docs
embed
examples
flac
webp
png
jpg
ogg video
openal
opensl
opus
physfs
release logging
tests
video
vorbis

monolith on

took 90s to compile

now liballegro_monolith.so.5.2 is 1.7M instead of: 7.2M

I only need this file and libdumb.so.1




---------------------------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------
---------------------------------------------------------------

20180425

I'm going to set up a new dev system on linux and document every step...

starting with ubuntu 16.04.4 on nv59

---------------------------------------------------------------
basic ubuntu setup
---------------------------------------------------------------
checked 'software and updates' all 4 repos were already selected
changed server from 'Server for Canada' to 'Main server'

In system settings -> system -> details
It checked fot updates then prompted to download and install 65M of updates then reboot

sudo apt-get update
sudo apt-get install openssh-server (to work remotely)

---------------------------------------------------------------
get packages for compiling allegro
---------------------------------------------------------------
sudo apt-get install build-essential git cmake cmake-curses-gui xorg-dev libgl1-mesa-dev libglu-dev


---------------------------------------------------------------
get packages for allegro's dependencies
---------------------------------------------------------------
sudo apt-get install libcurl4-openssl-dev libfreetype6-dev libgtk2.0-dev libasound-dev libpulse-dev libdumb1-dev


---------------------------------------------------------
Get the sources with git
---------------------------------------------------------
in a terminal, pwd = /home/m
git clone https://github.com/liballeg/allegro5.git
cd allegro5
git checkout 5.2.4
git pull --rebase origin 5.2.4

---------------------------------------------------------
make a build dir and configure with cmake
---------------------------------------------------------
int the allegro5 dir
mkdir build; cd build

ccmake -DCMAKE_INSTALL_PREFIX=/usr ..

build type: Release
monolith: on
all these off:
color
d3d
demo
docs
embed
examples
flac
webp
png
jpg
ogg video
openal
opensl
opus
physfs
release logging
tests
video
vorbis

press "c" twice, and then "g". You should now be back to a console.

---------------------------------------------------------
compile allegro and install
---------------------------------------------------------
make
took 71s to compile

sudo make install
Installed /usr/lib/liballegro_monolith.so.5.2.4 (size 1.7M)


---------------------------------------------------------
Install libnet
---------------------------------------------------------
- from my local copy of the sources
from a terminal go to the folder 'libnet' in the game folder
'make lib'
'sudo make install'
(puts libnet.h in /usr/include/)
(puts libnet.a in /usr/lib/x86_64-linux-gnu/)

m@nv59:~/Desktop/pm_client13/libnet$ make lib
make -C lib/ lib
make[1]: Entering directory '/home/m/Desktop/pm_client13/libnet/lib'
make[1]: Nothing to be done for 'lib'.
make[1]: Leaving directory '/home/m/Desktop/pm_client13/libnet/lib'
m@nv59:~/Desktop/pm_client13/libnet$ sudo make install
make -C lib/ install
make[1]: Entering directory '/home/m/Desktop/pm_client13/libnet/lib'
Copying libnet.a to library directory...
cp -f ../lib/libnet.a /usr/lib/x86_64-linux-gnu/libnet.a
Copying libnet.h to include directory...
cp -f ../include/libnet.h /usr/include/libnet.h
make[1]: Leaving directory '/home/m/Desktop/pm_client13/libnet/lib'
m@nv59:~/Desktop/pm_client13/libnet$


---------------------------------------------------------
Code::Blocks
---------------------------------------------------------
Ubuntu 16.04.4 in Software Manager has Code::Blocks version 13.12
that's pretty old...lets see what else I can find...

To install Code::Blocks version 16.01 from PPA, open a terminal and type:
sudo add-apt-repository ppa:damien-moore/codeblocks-stable
sudo apt-get update
sudo apt-get install codeblocks codeblocks-contrib


---------------------------------------------------------
Set up samba share on desktop for project files
---------------------------------------------------------
made a folder on the desktop 'pm_client7' and shared it
prompted to install samba, did it with no problems
needed to restart session
shared again, checked:
'allow other to create and delete files in this folder'
'guest access (for people without an account)'
clicked 'create share'
chose 'set permissions automatically'

copy sources to this shared folder then run sudo ./op to
set owner and permissions for all the files to 777 m:m


---------------------------------------------------------
Open project in code::blocks and compile
---------------------------------------------------------
First time code::blocks is run it complains about default compiler
just choose gcc and it wont complain after first time

gcc -v gives 5.4.0
in the past I tried updating to 7.2, but it seems to work fine on 5.4 as well

build settings:

compiler:
I always use -Wall

in ldm:
-g
-pg

in ldm_release:
-O3

linker:
-lallegro_monolith
-lz
-lnet
-lpthread


---------------------------------------------------------
Make a release
---------------------------------------------------------
manually copy the needed libraries to /linux_libs

cp /usr/lib/liballegro_monolith.so.5.2 ./linux_libs/
cp /usr/lib/x86_64-linux-gnu/libdumb.so.1 ./linux_libs

run 'lin_make_release'

A folder called 'purple_martians__linux' is created and needed files are copied to it
rename the folder like this: 'purple_martians_7.xx_linux'
right click on the folder and compress to tar.gz
....?
profit



----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------

20180428

I'm going to set up a new dev system on linux and document every step...

ubuntu-18.04-desktop-amd64 on nv59

---------------------------------------------------------------
basic ubuntu setup
---------------------------------------------------------------

In system settings -> system -> details
No updates found.

sudo apt-get update
sudo apt-get install openssh-server (to work remotely)

---------------------------------------------------------------
get packages for compiling allegro
---------------------------------------------------------------
sudo apt-get install build-essential git cmake cmake-curses-gui xorg-dev libgl1-mesa-dev libglu-dev


---------------------------------------------------------------
get packages for allegro's dependencies
---------------------------------------------------------------
sudo apt-get install libcurl4-openssl-dev libfreetype6-dev libgtk2.0-dev libasound-dev libpulse-dev libdumb1-dev


---------------------------------------------------------
Get the sources with git
---------------------------------------------------------
in a terminal, pwd = /home/m
git clone https://github.com/liballeg/allegro5.git
cd allegro5
git checkout 5.2.4
git pull --rebase origin 5.2.4

---------------------------------------------------------
make a build dir and configure with cmake
---------------------------------------------------------
int the allegro5 dir
mkdir build; cd build

ccmake -DCMAKE_INSTALL_PREFIX=/usr ..

build type: Release
monolith: on
all these off:
color
d3d
demo
docs
embed
examples
flac
webp
png
jpg
ogg video
openal
opensl
opus
physfs
release logging
tests
video
vorbis

press "c" twice, and then "g". You should now be back to a console.

---------------------------------------------------------
compile allegro and install
---------------------------------------------------------
make
took 71s to compile

sudo make install
Installed /usr/lib/liballegro_monolith.so.5.2.4 (size 1.7M)


---------------------------------------------------------
Install libnet
---------------------------------------------------------
- from my local copy of the sources
from a terminal go to the folder 'libnet' in the game folder
'make clean'
'make lib'
'sudo make install'
(puts libnet.h in /usr/include/)
(puts libnet.a in /usr/lib/x86_64-linux-gnu/)

---------------------------------------------------------
Code::Blocks
---------------------------------------------------------
In Software Manager:
installed Code::Blocks version 16.01

---------------------------------------------------------
Set up samba share on desktop for project files
---------------------------------------------------------

made a folder on the desktop 'pm_client13' and shared it
prompted to install samba, did it with no problems
checked:
'allow other to create and delete files in this folder'
'guest access (for people without an account)'
clicked 'create share'
chose 'set permissions automatically'

copy sources to this shared folder then run sudo ./op to
set owner and permissions for all the files to m:m 777

---------------------------------------------------------
Open project in code::blocks and compile
---------------------------------------------------------
First time code::blocks is run it complains about default compiler
just choose gcc and it wont complain after first time

gcc -v gives 7.3.0

build settings:

compiler:
I always use -Wall

in ldm:
-g
-pg

in ldm_release:
-O3

linker:
-lallegro_monolith
-lz
-lnet
-lpthread

---------------------------------------------------------
Make a release
---------------------------------------------------------
manually copy the needed libraries to /linux_libs

cp /usr/lib/liballegro_monolith.so.5.2 ./linux_libs/
cp /usr/lib/x86_64-linux-gnu/libdumb.so.1 ./linux_libs

run 'lin_make_release'

a folder called 'purple_martians__linux' is created and needed files are copied to it
rename the folder like this: 'purple_martians_7.xx_linux'
right click on the folder and compress to tar.gz
....?
profit









----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------

20220306

I'm going to set up a new dev system on linux and document every step...


ubuntu-20.04.4-desktop-amd64.iso
connected to wifi
minimal
download updates while installing
erase disk and install ubuntu

m
4230w
m
zaiden
log in automatically



---------------------------------------------------------------
basic ubuntu setup
---------------------------------------------------------------

sudo apt-get update
sudo apt-get install openssh-server (to work remotely)

from a putty terminal from now on...


SiegeLord's ubuntu install directions from Dec 13, 2020

https://github.com/liballeg/allegro_wiki/wiki/Install-Allegro-from-source-on-Ubuntu


Install general system dependencies.

sudo apt install git cmake build-essential

Install various dependencies.

sudo apt install libdumb1-dev \
                 libflac-dev \
                 libfreetype6-dev \
                 libgl1-mesa-dev \
                 libglu1-mesa-dev \
                 libgtk-3-dev \
                 libjpeg-dev \
                 libopenal-dev \
                 libphysfs-dev \
                 libpng-dev \
                 libpulse-dev \
                 libtheora-dev \
                 libvorbis-dev \
                 libwebp-dev \
                 libxext-dev \
                 libxxf86vm-dev \
                 libxrandr-dev \
                 libxinerama-dev \
                 libxpm-dev \
                 libopusfile-dev

Download Allegro's source from git and navigate to its directory.

git clone https://github.com/liballeg/allegro5.git
cd allegro5

Naturally, you can replace the repostitory to something else if you want grab the code from, e.g., a GitHub fork.

Configure and build Allegro.

mkdir build
cd build
cmake ..
make -j$(nproc)

If you're reproducing some sort of bug or developing a new feature, it can be helpful to build Allegro in debug mode by issuing cmake .. -DCMAKE_BUILD_TYPE=Debug. The default CMAKE_BUILD_TYPE is RelWithDebInfo.

Test by running an example.

cd examples
./ex_draw_bitmap

it all works!!!!

not sure what version I got...



I am not going to use git to get the source files yet...maybe later

---------------------------------------------------------
Set up samba share on desktop for project files
---------------------------------------------------------

made a folder on the desktop 'pm_client15' and shared it

right-clicking should show an option to share, if not, open it in nautilus file thingy and try again


prompted to install samba, did it with no problems
checked:
'allow other to create and delete files in this folder'
'guest access (for people without an account)'
clicked 'create share'
chose 'set permissions automatically'


copy sources to this shared folder then run sudo ./op to
set owner and permissions for all the files to m:m 777


---------------------------------------------------------
Install libnet
---------------------------------------------------------
- from my local copy of the sources
from a terminal go to the folder 'libnet' in the game folder
'make clean'
'make lib'
'sudo make install'
(puts libnet.h in /usr/include/)
(puts libnet.a in /usr/lib/x86_64-linux-gnu/)




---------------------------------------------------------
Code::Blocks
---------------------------------------------------------
In Software Manager:
installed Code::Blocks version 20.03.3

does not show up in applications, or command line...wtf

sudo apt-get install codeblocks





---------------------------------------------------------
Open project in code::blocks and compile
---------------------------------------------------------
First time code::blocks is run it complains about default compiler
just choose gcc and it wont complain after first time

gcc -v gives 9.3.0


build fails...cant find -lgmon or l-allegro_monolilth


make I have to make allegro following my old instructions


sudo apt-get install cmake-curses-gui

in the allegro5 build dir

ccmake -DCMAKE_INSTALL_PREFIX=/usr ..

build type: Release
monolith: on
all these off:
color
d3d
demo
docs
embed
examples
flac
webp
png
jpg
ogg video
openal
opensl
opus
physfs
release logging
tests
video
vorbis

press "c", and then "g". You should now be back to a console.

make
took 131s to compile

sudo make install
installed /usr/lib/liballegro_monolith.so.5.2.4 (size 1.7M)


now just cant find -lgmon removed


now can;' find

#include "pm.h"

its in the same dir as the .cpp files

now it works...i did not do anything....

undefined reference to '___chkstk_ms'

look like it could be gcc version stuff

on windows I use MinGW-W64 project (version 8.1.0, 32/64 bit, SEH)
allegro binaries are compiled with gcc 10.2

in linux I have 9.3 and complied the binaries with that
as well as my program....


also undefined reference to  '__imp__time64'



Installing Multiple GCC Versions

This section provides instructions about how to install and use multiple versions of GCC on Ubuntu 20.04. The newer versions of the GCC compiler include new functions and optimization improvements.

At the time of writing this article, the default Ubuntu repositories include several GCC versions, from 7.x.x to 10.x.x.

In the following example, we will install the latest three versions of GCC and G++.

Install the desired GCC and G++ versions by typing:

sudo apt install gcc-8 g++-8 gcc-9 g++-9 gcc-10 g++-10

The commands below configures alternative for each version and associate a priority with it. The default version is the one with the highest priority, in our case that is gcc-10.

sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 80 --slave /usr/bin/g++ g++ /usr/bin/g++-8 --slave /usr/bin/gcov gcov /usr/bin/gcov-8

Later if you want to change the default version use the update-alternatives command:

sudo update-alternatives --config gcc

There are 3 choices for the alternative gcc (providing /usr/bin/gcc).

  Selection    Path            Priority   Status
------------------------------------------------------------
* 0            /usr/bin/gcc-10   100       auto mode
  1            /usr/bin/gcc-10   100       manual mode
  2            /usr/bin/gcc-8    80        manual mode
  3            /usr/bin/gcc-9    90        manual mode

Press <enter> to keep the current choice[*], or type selection number:

You will be presented with a list of all installed GCC versions on your Ubuntu system. Enter the number of the version you want to be used as a default and press Enter.

The command will create symbolic links to the specific versions of GCC and G++.






what I did was

sudo apt install gcc-10
sudo apt install g++-10

sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9

m@4230w:~/Desktop/allegro5/build$ sudo update-alternatives --config gcc
There are 2 choices for the alternative gcc (providing /usr/bin/gcc).

  Selection    Path             Priority   Status
------------------------------------------------------------
* 0            /usr/bin/gcc-10   100       auto mode
  1            /usr/bin/gcc-10   100       manual mode
  2            /usr/bin/gcc-9    90        manual mode

Press <enter> to keep the current choice[*], or type selection number:

m@4230w:~/Desktop/allegro5/build$ gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/10/lto-wrapper
OFFLOAD_TARGET_NAMES=nvptx-none:amdgcn-amdhsa:hsa
OFFLOAD_TARGET_DEFAULT=1
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 10.3.0-1ubuntu1~20.04' --with-bugurl=file:///usr/share/doc/gcc-10/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++,m2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-10 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-bootstrap --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-plugin --enable-default-pie --with-system-zlib --enable-libphobos-checking=release --with-target-system-zlib=auto --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none=/build/gcc-10-S4I5Pr/gcc-10-10.3.0/debian/tmp-nvptx/usr,amdgcn-amdhsa=/build/gcc-10-S4I5Pr/gcc-10-10.3.0/debian/tmp-gcn/usr,hsa --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu --with-build-config=bootstrap-lto-lean --enable-link-mutex
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 10.3.0 (Ubuntu 10.3.0-1ubuntu1~20.04)


now that I have 10.3 the project seems to compile and run now....

exiting locks the entire system....CTRL-ALT-END kills it...



build settings:

compiler:
I always use -Wall

linker:
-lallegro_monolith
-lz
-lnet
-lpthread


can I join netgame...
Error: Client failed to set netchannel target: server[mi3]


could be a firewall thing....ufw is disabled

are there others??

---- I never did recompile libnet with 10.2 ----


rebooted 4230w

still cant ping mi3, but neither can 4230j ... wtf ...

4230w works as a server and 4230j and mi3 connect just fine....

it looks like 4230w doesn;t like the hostname..it works with IP...

sudo nano /etc/resolv.conf

changed: nameserver 127.0.0.53
to nameserver 192.168.1.1
now it works....

holy shit now what??

figure out the freezing on exit shit

test what it needs to work on bare linux system...can I just put libs in main folder?







---------------------------------------------------------
Make a release
---------------------------------------------------------
manually copy the needed libraries to /linux_libs


cp /usr/lib/liballegro_monolith.so.5.2.8 ./linux_libs/
cp /usr/lib/x86_64-linux-gnu/libdumb.so.1.0.0 ./linux_libs


run 'lin_make_release'

a folder called 'purple_martians__linux' is created and needed files are copied to it
then the folder is tar.gz

rename it and copy it.....



actually the script does all the copying and tar.gz ing



cant wait to test it on a new install

sudo apt-get update

make folder and share it


still having library issues....

this look great....
























----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------

20220306
2nd time setting up a dev system from scratch

maybe less false starts this time


ubuntu-20.04.4-desktop-amd64.iso
connected via ethernet
minimal
don't download updates while installing
erase disk and install ubuntu

m
4230y
m
zaiden
log in automatically



---------------------------------------------------------------
basic ubuntu setup
---------------------------------------------------------------

sudo apt-get update
sudo apt-get install openssh-server (to work remotely)

from a putty terminal from now on...


lets just put everything on one line...


sudo apt install git cmake cmake-curses-gui build-essential \

                 libdumb1-dev \
                 libflac-dev \
                 libfreetype6-dev \
                 libgl1-mesa-dev \
                 libglu1-mesa-dev \
                 libgtk-3-dev \
                 libjpeg-dev \
                 libopenal-dev \
                 libphysfs-dev \
                 libpng-dev \
                 libpulse-dev \
                 libtheora-dev \
                 libvorbis-dev \
                 libwebp-dev \
                 libxext-dev \
                 libxxf86vm-dev \
                 libxrandr-dev \
                 libxinerama-dev \
                 libxpm-dev \
                 libopusfile-dev \
                 gcc-10 \
                 g++-10 \
                 codeblocks











Install general system dependencies:
sudo apt install git cmake cmake-curses-gui build-essential

Install various dependencies:

sudo apt install libdumb1-dev \
                 libflac-dev \
                 libfreetype6-dev \
                 libgl1-mesa-dev \
                 libglu1-mesa-dev \
                 libgtk-3-dev \
                 libjpeg-dev \
                 libopenal-dev \
                 libphysfs-dev \
                 libpng-dev \
                 libpulse-dev \
                 libtheora-dev \
                 libvorbis-dev \
                 libwebp-dev \
                 libxext-dev \
                 libxxf86vm-dev \
                 libxrandr-dev \
                 libxinerama-dev \
                 libxpm-dev \
                 libopusfile-dev



----------------------------------------------------------------------------------
Get a newer version of gcc (ubuntu 20.4 comes with 9.3, we want at least 10.2)
----------------------------------------------------------------------------------
sudo apt install gcc-10
sudo apt install g++-10

sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9

sudo update-alternatives --config gcc
There are 2 choices for the alternative gcc (providing /usr/bin/gcc).

  Selection    Path             Priority   Status
------------------------------------------------------------
* 0            /usr/bin/gcc-10   100       auto mode
  1            /usr/bin/gcc-10   100       manual mode
  2            /usr/bin/gcc-9    90        manual mode

Press <enter> to keep the current choice[*], or type selection number:


gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/10/lto-wrapper
OFFLOAD_TARGET_NAMES=nvptx-none:amdgcn-amdhsa:hsa
OFFLOAD_TARGET_DEFAULT=1
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 10.3.0-1ubuntu1~20.04' --with-bugurl=file:///usr/share/doc/gcc-10/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++,m2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-10 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-bootstrap --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-plugin --enable-default-pie --with-system-zlib --enable-libphobos-checking=release --with-target-system-zlib=auto --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none=/build/gcc-10-S4I5Pr/gcc-10-10.3.0/debian/tmp-nvptx/usr,amdgcn-amdhsa=/build/gcc-10-S4I5Pr/gcc-10-10.3.0/debian/tmp-gcn/usr,hsa --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu --with-build-config=bootstrap-lto-lean --enable-link-mutex
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 10.3.0 (Ubuntu 10.3.0-1ubuntu1~20.04)



Download Allegro's source from git and navigate to its directory.

from a terminal at Desktop:

git clone https://github.com/liballeg/allegro5.git
cd allegro5

Naturally, you can replace the repostitory to something else if you want grab the code from, e.g., a GitHub fork.

Configure and build Allegro.

mkdir build
cd build


cmake ..
ccmake -DCMAKE_INSTALL_PREFIX=/usr ..

build type: Release
monolith: on

all these off:
color
d3d
demo
docs (all)
embed
examples
flac
png
jpg
webp
ogg video
openal
opensl
opus
physfs
release logging
tests
video
vorbis

press "c", "e" and then "q". You should now be back to a console.

make

takes about 2 min to compile

sudo make install
installed /usr/lib/liballegro_monolith.so.5.2.8 (size 1.7M)







I am not going to use git to get the source files yet...maybe later

---------------------------------------------------------
Set up samba share on desktop for project files
---------------------------------------------------------

made a folder on the desktop 'pm_client17' and shared it

right-clicking should show an option to share, if not, open it in nautilus file thingy and try again

prompted to install samba, did it with no problems
checked:
'allow other to create and delete files in this folder'
'guest access (for people without an account)'
clicked 'create share'
chose 'set permissions automatically'

copy sources to this shared folder then run sudo ./op to
set owner and permissions for all the files to m:m 777



---------------------------------------------------------
Install libnet
---------------------------------------------------------
- from my local copy of the sources
from a terminal go to the folder 'libnet' in the game folder
'make clean'
'make lib'
'sudo make install'
(puts libnet.h in /usr/include/)
(puts libnet.a in /usr/lib/x86_64-linux-gnu/)



---------------------------------------------------------
Code::Blocks
---------------------------------------------------------
sudo apt-get install codeblocks


---------------------------------------------------------
Open project in code::blocks and compile
---------------------------------------------------------
First time code::blocks is run it complains about default compiler
just choose gcc and it wont complain after first time

compiler:
-Wall

linker:
-lallegro_monolith
-lz
-lnet
-lpthread

compile and run...






---------------------------------
---------------------------------
---------------------------------

20220307 testing

---------------------------------
---------------------------------
---------------------------------
---------------------------------

MX-21_x64
cannot find libOpenGL.so.0


found it:

cp /usr/lib/x86_64-linux-gnu/libOpenGL.so.0 /home/m/Desktop/pm_client15/linux_libs/

works now....

netgame server works

cannot pass command line args when starting with script ./pml



manjaro is not the right size???








mr5u20 new u20 install
cannot run vanilla 7.05..



mr5u20 can't find libopusfile.so.0
got it and put it in lib folder....
runs great, does 10,000 fps no problem





































----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------
----------------------------------------------------------------------

20220307
3rd time setting up a dev system from scratch

even more streamlined

ubuntu-20.04.4-desktop-amd64.iso
connected via ethernet
minimal
don't download updates while installing
erase disk and install ubuntu

m
mi3u20
m
zaiden
log in automatically



---------------------------------------------------------------
basic ubuntu setup
---------------------------------------------------------------

sudo apt-get update
sudo apt-get install openssh-server (to work remotely)

from a putty terminal from now on...

lets just put everything on one line...

sudo apt install git cmake cmake-curses-gui build-essential \
                 libdumb1-dev \
                 libflac-dev \
                 libfreetype6-dev \
                 libgl1-mesa-dev \
                 libglu1-mesa-dev \
                 libgtk-3-dev \
                 libjpeg-dev \
                 libopenal-dev \
                 libphysfs-dev \
                 libpng-dev \
                 libpulse-dev \
                 libtheora-dev \
                 libvorbis-dev \
                 libwebp-dev \
                 libxext-dev \
                 libxxf86vm-dev \
                 libxrandr-dev \
                 libxinerama-dev \
                 libxpm-dev \
                 libopusfile-dev \
                 gcc-10 \
                 g++-10 \
                 codeblocks





sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9

sudo update-alternatives --config gcc
There are 2 choices for the alternative gcc (providing /usr/bin/gcc).

  Selection    Path             Priority   Status
------------------------------------------------------------
* 0            /usr/bin/gcc-10   100       auto mode
  1            /usr/bin/gcc-10   100       manual mode
  2            /usr/bin/gcc-9    90        manual mode

Press <enter> to keep the current choice[*], or type selection number:

gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/10/lto-wrapper
OFFLOAD_TARGET_NAMES=nvptx-none:amdgcn-amdhsa:hsa
OFFLOAD_TARGET_DEFAULT=1
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 10.3.0-1ubuntu1~20.04' --with-bugurl=file:///usr/share/doc/gcc-10/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++,m2 --prefix=/usr --with-gcc-major-version-only --program-suffix=-10 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-bootstrap --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-plugin --enable-default-pie --with-system-zlib --enable-libphobos-checking=release --with-target-system-zlib=auto --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none=/build/gcc-10-S4I5Pr/gcc-10-10.3.0/debian/tmp-nvptx/usr,amdgcn-amdhsa=/build/gcc-10-S4I5Pr/gcc-10-10.3.0/debian/tmp-gcn/usr,hsa --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu --with-build-config=bootstrap-lto-lean --enable-link-mutex
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 10.3.0 (Ubuntu 10.3.0-1ubuntu1~20.04)



Download Allegro's source from git and navigate to its directory.

from a terminal at Desktop:

git clone https://github.com/liballeg/allegro5.git
cd allegro5

Naturally, you can replace the repostitory to something else if you want grab the code from, e.g., a GitHub fork.

Configure and build Allegro.

mkdir build
cd build


cmake ..
ccmake -DCMAKE_INSTALL_PREFIX=/usr ..

build type: Release
monolith: on

all these off:
color
d3d
demo
docs (all)
embed
examples
flac
png
jpg
webp
ogg video
openal
opensl
opus
physfs
release logging
tests
video
vorbis

press "c", "e" and then "q". You should now be back to a console.

make

takes about 2 min to compile (40s on zi3u20) (20 sec on mr5u20)



sudo make install
installed /usr/lib/liballegro_monolith.so.5.2.8 (size 1.7M)







I am not going to use git to get the source files yet...maybe later

---------------------------------------------------------
Set up samba share on desktop for project files
---------------------------------------------------------

made a folder on the desktop 'pm_client17' and shared it

right-clicking should show an option to share, if not, open it in nautilus file thingy and try again

prompted to install samba, did it with no problems
checked:
'allow other to create and delete files in this folder'
'guest access (for people without an account)'
clicked 'create share'
chose 'set permissions automatically'

copy sources to this shared folder then run sudo ./op to
set owner and permissions for all the files to m:m 777



---------------------------------------------------------
Install libnet
---------------------------------------------------------
- from my local copy of the sources
from a terminal go to the folder 'libnet' in the game folder
'make clean'
'make lib'
'sudo make install'
(puts libnet.h in /usr/include/)
(puts libnet.a in /usr/lib/x86_64-linux-gnu/)



---------------------------------------------------------
Code::Blocks
---------------------------------------------------------
sudo apt-get install codeblocks


---------------------------------------------------------
Open project in code::blocks and compile
---------------------------------------------------------
First time code::blocks is run it complains about default compiler
just choose gcc and it wont complain after first time

compiler:
-Wall

linker:
-lallegro_monolith
-lz
-lnet
-lpthread

compile and run...








































































MX1

already has gcc 10.2




sudo apt install git cmake cmake-curses-gui build-essential \
                 libdumb1-dev \
                 libflac-dev \
                 libfreetype6-dev \
                 libgl1-mesa-dev \
                 libglu1-mesa-dev \
                 libgtk-3-dev \
                 libjpeg-dev \
                 libopenal-dev \
                 libphysfs-dev \
                 libpng-dev \
                 libpulse-dev \
                 libtheora-dev \
                 libvorbis-dev \
                 libwebp-dev \
                 libxext-dev \
                 libxxf86vm-dev \
                 libxrandr-dev \
                 libxinerama-dev \
                 libxpm-dev \
                 libopusfile-dev \
                 codeblocks


Download Allegro's source from git and navigate to its directory.

from a terminal at Desktop:

git clone https://github.com/liballeg/allegro5.git
cd allegro5

Naturally, you can replace the repostitory to something else if you want grab the code from, e.g., a GitHub fork.

Configure and build Allegro.

mkdir build
cd build


cmake ..
ccmake -DCMAKE_INSTALL_PREFIX=/usr ..

build type: Release
monolith: on

all these off:
color
d3d
demo
docs (all)
embed
examples
flac
png
jpg
webp
ogg video
openal
opensl
opus
physfs
release logging
tests
video
vorbis

press "c", "e" and then "q". You should now be back to a console.

make

takes about 2 min to compile (40s on zi3u20) (20 sec on mr5u20)



sudo make install
installed /usr/lib/liballegro_monolith.so.5.2.8 (size 1.7M)







I am not going to use git to get the source files yet...maybe later

---------------------------------------------------------
Set up samba share on desktop for project files
---------------------------------------------------------

made a folder on the desktop 'pm_client17' and shared it

right-clicking should show an option to share, if not, open it in nautilus file thingy and try again

prompted to install samba, did it with no problems
checked:
'allow other to create and delete files in this folder'
'guest access (for people without an account)'
clicked 'create share'
chose 'set permissions automatically'

copy sources to this shared folder then run sudo ./op to
set owner and permissions for all the files to m:m 777



---------------------------------------------------------
Install libnet
---------------------------------------------------------
- from my local copy of the sources
from a terminal go to the folder 'libnet' in the game folder
'make clean'
'make lib'
'sudo make install'
(puts libnet.h in /usr/include/)
(puts libnet.a in /usr/lib/x86_64-linux-gnu/)



---------------------------------------------------------
Code::Blocks
---------------------------------------------------------
sudo apt-get install codeblocks


---------------------------------------------------------
Open project in code::blocks and compile
---------------------------------------------------------
First time code::blocks is run it complains about default compiler
just choose gcc and it wont complain after first time

compiler:
-Wall

linker:
-lallegro_monolith
-lz
-lnet
-lpthread

compile and run...

































https://stackoverflow.com/questions/39978762/linux-executable-cant-find-shared-library-in-same-folder


-Wl,-rpath='${ORIGIN}'


-Wl,-rpath='${ORIGIN}/linux_libs'
that did not work....

lets try this:
-Wl,-rpath='${ORIGIN}'



-Wl,-rpath='${ORIGIN}/linux_libs/liballegro_monolith.so.5.2'
-Wl,-rpath='${ORIGIN}/linux_libs/libdumb.so.1'

that does not work either....


-Wl,-rpath='${ORIGIN}/linux_libs/liballegro_monolith.so.5.2'
-Wl,-rpath='${ORIGIN}/linux_libs/libdumb.so.1'


LD_LIBRARY_PATH=./linux_libs ./pm




test on 4230w....move the libraries so they can't be found...

/usr/lib/liballegro_monolith.so.5.2.8
/usr/lib/x86_64-linux-gnu/libdumb.so.1.0.0


patchelf --print-rpath pm

/linux_libs/liballegro_monolith.so.5.2:/linux_libs/libdumb.so.1

patchelf --set-rpath '$ORIGIN/linux_libs/liballegro_monolith.so.5.2:$ORIGIN/linux_libs/libdumb.so.1' pm


patchelf --set-rpath '$ORIGIN/linux_libs/liballegro_monolith.so.5.2' pm





Help using -rpath to set library search path in executable

I am trying to figure out how to use -rpath to point at a sub-directory below my executable for some shared libraries.


I am using:

ubuntu 20.04
gcc 10.3
allegro 5.2.8 (compiled from source)

My project compiles and works fine.

It relies on 2 shared libraries that in the name of being portable, have to be distributed with the executable.

liballegro_monolith.so.5.2
libdumb.so.1

Currently I have them in a subdirectory called 'linux_libs' in the main executable directory
The way I have been doing it for years is to run a script when I want to run the game.
The script sets the library path then runs the game.

LD_LIBRARY_PATH=./linux_libs ./pm

I wish I could just simply put the 2 files in the same dir as the executable but that does not work.



I have been trying to use -rpath to hard code the run-time search path into the executable, with no success at all
I have read many descriptions and examples online, but have not been able to figure out what I am doing wrong.

the first example I added to the linker options:
-Wl,-rpath='${ORIGIN}'

did nothing

then I though I might need to add the entire path to the library

-Wl,-rpath='${ORIGIN}/linux_libs/liballegro_monolith.so.5.2'
-Wl,-rpath='${ORIGIN}/linux_libs/libdumb.so.1'

this did not work either


then I got patchelf and ran

patchelf --print-rpath pm

/linux_libs/liballegro_monolith.so.5.2:/linux_libs/libdumb.so.1

so I tried to set it with:

patchelf --set-rpath '$ORIGIN/linux_libs/liballegro_monolith.so.5.2:$ORIGIN/linux_libs/libdumb.so.1' pm
patchelf --print-rpath pm
$ORIGIN/linux_libs/liballegro_monolith.so.5.2:$ORIGIN/linux_libs/libdumb.so.1

still does not work....

./pm: error while loading shared libraries: liballegro_monolith.so.5.2: cannot open shared object file: No such file or directory


yet everytime I run the script:

LD_LIBRARY_PATH=./linux_libs ./pm

it works perfectly



I am lost here.

Can anyone point me in the right direction?

Tell me what I am doing wrong?

Suggest something else that might work?



try this:

patchelf --set-rpath './linux_libs/liballegro_monolith.so.5.2:./linux_libs/libdumb.so.1' pm








--------------------------------------------
20220313 linux libs
-------------------------------------------

what does allegro install for libs?
/usr/lib/liballegro_monolith.so.5.2.8
/usr/lib/liballegro_monolith.so.5.2
/usr/lib/liballegro_monolith.so

only 5.2.8 is real, the others are links

copy libs from default locations to linux_libs in the pm folder:
(run this in the pm folder)

cp /usr/lib/liballegro_monolith* ./linux_libs
cp /usr/lib/x86_64-linux-gnu/libdumb* ./linux_libs

this copied everything...
-rw-r--r-- 1 m m 5.4M Mar 13 13:23 liballegro_monolith-debug.so
-rw-r--r-- 1 m m 5.4M Mar 13 13:23 liballegro_monolith-debug.so.5.2
-rw-r--r-- 1 m m 5.4M Mar 13 13:23 liballegro_monolith-debug.so.5.2.8
-rw-r--r-- 1 m m 1.8M Mar 13 13:23 liballegro_monolith.so
-rw-r--r-- 1 m m 1.8M Mar 13 13:23 liballegro_monolith.so.5.2
-rw-r--r-- 1 m m 1.8M Mar 13 13:23 liballegro_monolith.so.5.2.8
-rw-r--r-- 1 m m 295K Mar 13 13:23 libdumb.a
-rw-r--r-- 1 m m 214K Mar 13 13:23 libdumb.so
-rw-r--r-- 1 m m 214K Mar 13 13:23 libdumb.so.1
-rw-r--r-- 1 m m 214K Mar 13 13:23 libdumb.so.1.0.0

move libs from default locations so I can test:
mkdir /home/m/temp_linux_libs
sudo mv /usr/lib/liballegro_monolith* /home/m/temp_linux_libs
sudo mv /usr/lib/x86_64-linux-gnu/libdumb* /home/m/temp_linux_libs

to restore them:
sudo cp /home/m/temp_linux_libs/liballegro_monolith* /usr/lib
sudo cp /home/m/temp_linux_libs/libdumb* /usr/lib/x86_64-linux-gnu/





patchelf --print-rpath pm


patchelf --set-rpath '$ORIGIN/linux_libs/liballegro_monolith.so.5.2:$ORIGIN/linux_libs/libdumb.so.1' pm


patchelf --set-rpath '$ORIGIN/linux_libs/liballegro_monolith.so.5.2' pm

patchelf --set-rpath '/home/m/Desktop/pm_client22/linux_libs' pm

patchelf --set-rpath '' pm


ok watch this nonsense


$ ./pm
./pm: error while loading shared libraries: liballegro_monolith.so.5.2: cannot open shared object file: No such file or directory

$ patchelf --print-rpath pm

$ patchelf --set-rpath '/home/m/Desktop/pm_client22/linux_libs' pm
$ patchelf --print-rpath pm
/home/m/Desktop/pm_client22/linux_libs

$ ./pm
./pm: error while loading shared libraries: libdumb.so.1: cannot open shared object file: No such file or directory

$ cd linux_libs/
$ ll
total 23M
-rw-r--r-- 1 m m 5.4M Mar 13 13:23 liballegro_monolith-debug.so
-rw-r--r-- 1 m m 5.4M Mar 13 13:23 liballegro_monolith-debug.so.5.2
-rw-r--r-- 1 m m 5.4M Mar 13 13:23 liballegro_monolith-debug.so.5.2.8
-rw-r--r-- 1 m m 1.8M Mar 13 13:23 liballegro_monolith.so
-rw-r--r-- 1 m m 1.8M Mar 13 13:23 liballegro_monolith.so.5.2
-rw-r--r-- 1 m m 1.8M Mar 13 13:23 liballegro_monolith.so.5.2.8
-rw-r--r-- 1 m m 295K Mar 13 13:23 libdumb.a
-rw-r--r-- 1 m m 214K Mar 13 13:23 libdumb.so
-rw-r--r-- 1 m m 214K Mar 13 13:23 libdumb.so.1
-rw-r--r-- 1 m m 214K Mar 13 13:23 libdumb.so.1.0.0

$ cd ..

$ ./pml

Purple Martians Version 7.10
Allegro Version: 5.2.8.0
System ID: Xglx
Desktop Resolution: 0x0
Error creating display

Unable to init server: Could not connect: Connection refused

$ cat pml
LD_LIBRARY_PATH=./linux_libs ./pm

I can set it and have it find the allegro but not dumb...is dumb called by allegro and that's why it cant find it?


I want to experiment and see how to do a relative path for rpath....

patchelf --set-rpath './linux_libs' pm

this seems to work but it still cant find dumb


test on other linux systems from scratch and see what libs are missing....


ubuntu-20.04
minimal setup
zi3u20a
detects liballegro in linux_libs dir but not libdumb... same








UPDATE


I figured out the how to use rpath...but it only works for liballegro, not libdumb

This does not make any sense to me, can someone help explain it to me?


Background:
I am using ubuntu 20.04, allegro 5.2.8, gcc 10.3
my executable is 'pm'
It requires many things...there is a huge list when I type ldd ./pm
It works perfectly on the ubuntu developement system that has all the libraries installed.
But I am trying to make a simple setup for other linux systems that do not have the libraries installed.

I am usually missing 2 libraries:
liballegro_monolith.so.5.2
libdumb.so.1

So what I have done is put them both in a dir called 'linux_libs' just under the main executable dir
I use a simple one line script to run my game: LD_LIBRARY_PATH=./linux_libs ./pm
This has always worked.

Recently I was trying to hard code the library path into the executable like this:

patchelf --set-rpath './linux_libs' pm

This works for liballegro_monolith.so.5.2 but not for libdumb.so.1
It still complains that it cannot find it

This makes no sense to me, it is right there, in the same dir as the liballegro..
Why can it find one and not the other?

I know it is valid because when I run the script that sets LD_LIBRARY_PATH it finds it and works

Can anyone help explain what is going wrong for me?


If I had to guess....
liballeg is needed by my program so it can be found because -rpath is hard coded into my program
libdumb is needed by allegro and cant be found because liballegro.so doesn't know about the rpath in my program

Then why does LD_LIBRARY_PATH work for both?

This is not a huge problem, I can easily get around it by running the script to set LD_LIBARY_PATH
Or I could get the user to copy the contents of 'linux_libs' to usr/lib

But it is bothering me why it doesn't work...I want to know why!!


patchelf --set-rpath '' pm
patchelf --print-rpath pm

ldd ./pm
        linux-vdso.so.1 (0x00007ffc8fd11000)
        liballegro_monolith.so.5.2 => not found
        libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007fa504f92000)
        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fa504f70000)
        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fa504e2c000)
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fa504c67000)
        /lib64/ld-linux-x86-64.so.2 (0x00007fa512d34000)

patchelf --set-rpath './linux_libs' pm
ldd ./pm
        linux-vdso.so.1 (0x00007ffcdffc8000)
        liballegro_monolith.so.5.2 => ./linux_libs/liballegro_monolith.so.5.2 (0x00007f5c9df51000)
        libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007f5c9df1b000)
        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f5c9def9000)
        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f5c9ddb5000)
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f5c9dbf0000)
        libX11.so.6 => /lib/x86_64-linux-gnu/libX11.so.6 (0x00007f5c9daad000)
        libXcursor.so.1 => /lib/x86_64-linux-gnu/libXcursor.so.1 (0x00007f5c9da9e000)
        libXpm.so.4 => /lib/x86_64-linux-gnu/libXpm.so.4 (0x00007f5c9d88c000)
        libXi.so.6 => /lib/x86_64-linux-gnu/libXi.so.6 (0x00007f5c9d87a000)
        libXinerama.so.1 => /lib/x86_64-linux-gnu/libXinerama.so.1 (0x00007f5c9d875000)
        libXrandr.so.2 => /lib/x86_64-linux-gnu/libXrandr.so.2 (0x00007f5c9d66a000)
        libOpenGL.so.0 => /lib/x86_64-linux-gnu/libOpenGL.so.0 (0x00007f5c9d63e000)
        libGLX.so.0 => /lib/x86_64-linux-gnu/libGLX.so.0 (0x00007f5c9d608000)
        libpulse-simple.so.0 => /lib/x86_64-linux-gnu/libpulse-simple.so.0 (0x00007f5c9d601000)
        libpulse.so.0 => /lib/x86_64-linux-gnu/libpulse.so.0 (0x00007f5c9d5ad000)
        libdumb.so.1 => not found
        libfreetype.so.6 => /lib/x86_64-linux-gnu/libfreetype.so.6 (0x00007f5c9d4ea000)
        libgtk-3.so.0 => /lib/x86_64-linux-gnu/libgtk-3.so.0 (0x00007f5c9cd38000)
        libgdk-3.so.0 => /lib/x86_64-linux-gnu/libgdk-3.so.0 (0x00007f5c9cc31000)
        libgobject-2.0.so.0 => /lib/x86_64-linux-gnu/libgobject-2.0.so.0 (0x00007f5c9cbd7000)
        libglib-2.0.so.0 => /lib/x86_64-linux-gnu/libglib-2.0.so.0 (0x00007f5c9caa8000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f5cabe51000)
        libxcb.so.1 => /lib/x86_64-linux-gnu/libxcb.so.1 (0x00007f5c9ca7d000)
        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f5c9ca77000)
        libXrender.so.1 => /lib/x86_64-linux-gnu/libXrender.so.1 (0x00007f5c9c86b000)
        libXfixes.so.3 => /lib/x86_64-linux-gnu/libXfixes.so.3 (0x00007f5c9c863000)
        libXext.so.6 => /lib/x86_64-linux-gnu/libXext.so.6 (0x00007f5c9c84e000)
        libGLdispatch.so.0 => /lib/x86_64-linux-gnu/libGLdispatch.so.0 (0x00007f5c9c796000)
        libpulsecommon-14.2.so => /usr/lib/x86_64-linux-gnu/pulseaudio/libpulsecommon-14.2.so (0x00007f5c9c712000)
        libdbus-1.so.3 => /lib/x86_64-linux-gnu/libdbus-1.so.3 (0x00007f5c9c6bb000)
        libpng16.so.16 => /lib/x86_64-linux-gnu/libpng16.so.16 (0x00007f5c9c681000)
        libbrotlidec.so.1 => /lib/x86_64-linux-gnu/libbrotlidec.so.1 (0x00007f5c9c673000)
        libgmodule-2.0.so.0 => /lib/x86_64-linux-gnu/libgmodule-2.0.so.0 (0x00007f5c9c66d000)
        libpangocairo-1.0.so.0 => /lib/x86_64-linux-gnu/libpangocairo-1.0.so.0 (0x00007f5c9c65c000)
        libcairo-gobject.so.2 => /lib/x86_64-linux-gnu/libcairo-gobject.so.2 (0x00007f5c9c650000)
        libcairo.so.2 => /lib/x86_64-linux-gnu/libcairo.so.2 (0x00007f5c9c529000)
        libgdk_pixbuf-2.0.so.0 => /lib/x86_64-linux-gnu/libgdk_pixbuf-2.0.so.0 (0x00007f5c9c503000)
        libatk-1.0.so.0 => /lib/x86_64-linux-gnu/libatk-1.0.so.0 (0x00007f5c9c4d9000)
        libatk-bridge-2.0.so.0 => /lib/x86_64-linux-gnu/libatk-bridge-2.0.so.0 (0x00007f5c9c4a2000)
        libepoxy.so.0 => /lib/x86_64-linux-gnu/libepoxy.so.0 (0x00007f5c9c373000)
        libfribidi.so.0 => /lib/x86_64-linux-gnu/libfribidi.so.0 (0x00007f5c9c357000)
        libgio-2.0.so.0 => /lib/x86_64-linux-gnu/libgio-2.0.so.0 (0x00007f5c9c177000)
        libpangoft2-1.0.so.0 => /lib/x86_64-linux-gnu/libpangoft2-1.0.so.0 (0x00007f5c9c15e000)
        libpango-1.0.so.0 => /lib/x86_64-linux-gnu/libpango-1.0.so.0 (0x00007f5c9c10c000)
        libharfbuzz.so.0 => /lib/x86_64-linux-gnu/libharfbuzz.so.0 (0x00007f5c9c024000)
        libfontconfig.so.1 => /lib/x86_64-linux-gnu/libfontconfig.so.1 (0x00007f5c9bfde000)
        libXcomposite.so.1 => /lib/x86_64-linux-gnu/libXcomposite.so.1 (0x00007f5c9bfd7000)
        libXdamage.so.1 => /lib/x86_64-linux-gnu/libXdamage.so.1 (0x00007f5c9bfd2000)
        libxkbcommon.so.0 => /lib/x86_64-linux-gnu/libxkbcommon.so.0 (0x00007f5c9bf8f000)
        libwayland-cursor.so.0 => /lib/x86_64-linux-gnu/libwayland-cursor.so.0 (0x00007f5c9bf86000)
        libwayland-egl.so.1 => /lib/x86_64-linux-gnu/libwayland-egl.so.1 (0x00007f5c9bf81000)
        libwayland-client.so.0 => /lib/x86_64-linux-gnu/libwayland-client.so.0 (0x00007f5c9bf70000)
        librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f5c9bf65000)
        libffi.so.7 => /lib/x86_64-linux-gnu/libffi.so.7 (0x00007f5c9bf57000)
        libpcre.so.3 => /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007f5c9bee4000)
        libXau.so.6 => /lib/x86_64-linux-gnu/libXau.so.6 (0x00007f5c9bedf000)
        libXdmcp.so.6 => /lib/x86_64-linux-gnu/libXdmcp.so.6 (0x00007f5c9bcd9000)
        libsystemd.so.0 => /lib/x86_64-linux-gnu/libsystemd.so.0 (0x00007f5c9bc24000)
        libwrap.so.0 => /lib/x86_64-linux-gnu/libwrap.so.0 (0x00007f5c9bc16000)
        libsndfile.so.1 => /lib/x86_64-linux-gnu/libsndfile.so.1 (0x00007f5c9bb93000)
        libasyncns.so.0 => /lib/x86_64-linux-gnu/libasyncns.so.0 (0x00007f5c9bb8b000)
        libbrotlicommon.so.1 => /lib/x86_64-linux-gnu/libbrotlicommon.so.1 (0x00007f5c9bb68000)
        libpixman-1.so.0 => /lib/x86_64-linux-gnu/libpixman-1.so.0 (0x00007f5c9babd000)
        libxcb-shm.so.0 => /lib/x86_64-linux-gnu/libxcb-shm.so.0 (0x00007f5c9bab6000)
        libxcb-render.so.0 => /lib/x86_64-linux-gnu/libxcb-render.so.0 (0x00007f5c9baa7000)
        libatspi.so.0 => /lib/x86_64-linux-gnu/libatspi.so.0 (0x00007f5c9ba70000)
        libmount.so.1 => /lib/x86_64-linux-gnu/libmount.so.1 (0x00007f5c9ba13000)
        libselinux.so.1 => /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f5c9b9e7000)
        libresolv.so.2 => /lib/x86_64-linux-gnu/libresolv.so.2 (0x00007f5c9b9cb000)
        libthai.so.0 => /lib/x86_64-linux-gnu/libthai.so.0 (0x00007f5c9b9c0000)
        libgraphite2.so.3 => /lib/x86_64-linux-gnu/libgraphite2.so.3 (0x00007f5c9b994000)
        libexpat.so.1 => /lib/x86_64-linux-gnu/libexpat.so.1 (0x00007f5c9b965000)
        libuuid.so.1 => /lib/x86_64-linux-gnu/libuuid.so.1 (0x00007f5c9b95c000)
        libbsd.so.0 => /lib/x86_64-linux-gnu/libbsd.so.0 (0x00007f5c9b943000)
        liblzma.so.5 => /lib/x86_64-linux-gnu/liblzma.so.5 (0x00007f5c9b91b000)
        libzstd.so.1 => /lib/x86_64-linux-gnu/libzstd.so.1 (0x00007f5c9b840000)
        liblz4.so.1 => /lib/x86_64-linux-gnu/liblz4.so.1 (0x00007f5c9b81d000)
        libgcrypt.so.20 => /lib/x86_64-linux-gnu/libgcrypt.so.20 (0x00007f5c9b6fd000)
        libnsl.so.2 => /lib/x86_64-linux-gnu/libnsl.so.2 (0x00007f5c9b6e2000)
        libFLAC.so.8 => /lib/x86_64-linux-gnu/libFLAC.so.8 (0x00007f5c9b6a1000)
        libvorbis.so.0 => /lib/x86_64-linux-gnu/libvorbis.so.0 (0x00007f5c9b674000)
        libvorbisenc.so.2 => /lib/x86_64-linux-gnu/libvorbisenc.so.2 (0x00007f5c9b5c9000)
        libopus.so.0 => /lib/x86_64-linux-gnu/libopus.so.0 (0x00007f5c9b56e000)
        libogg.so.0 => /lib/x86_64-linux-gnu/libogg.so.0 (0x00007f5c9b561000)
        libblkid.so.1 => /lib/x86_64-linux-gnu/libblkid.so.1 (0x00007f5c9b50e000)
        libpcre2-8.so.0 => /lib/x86_64-linux-gnu/libpcre2-8.so.0 (0x00007f5c9b476000)
        libdatrie.so.1 => /lib/x86_64-linux-gnu/libdatrie.so.1 (0x00007f5c9b46c000)
        libmd.so.0 => /lib/x86_64-linux-gnu/libmd.so.0 (0x00007f5c9b45f000)
        libgpg-error.so.0 => /lib/x86_64-linux-gnu/libgpg-error.so.0 (0x00007f5c9b439000)
        libtirpc.so.3 => /lib/x86_64-linux-gnu/libtirpc.so.3 (0x00007f5c9b408000)
        libgssapi_krb5.so.2 => /lib/x86_64-linux-gnu/libgssapi_krb5.so.2 (0x00007f5c9b3b5000)
        libkrb5.so.3 => /lib/x86_64-linux-gnu/libkrb5.so.3 (0x00007f5c9b2db000)
        libk5crypto.so.3 => /lib/x86_64-linux-gnu/libk5crypto.so.3 (0x00007f5c9b2ab000)
        libcom_err.so.2 => /lib/x86_64-linux-gnu/libcom_err.so.2 (0x00007f5c9b2a5000)
        libkrb5support.so.0 => /lib/x86_64-linux-gnu/libkrb5support.so.0 (0x00007f5c9b294000)
        libkeyutils.so.1 => /lib/x86_64-linux-gnu/libkeyutils.so.1 (0x00007f5c9b28d000)

cd ./linux_libs/
ll
total 23M
-rw-r--r-- 1 m m 5.4M Mar 13 13:23 liballegro_monolith-debug.so
-rw-r--r-- 1 m m 5.4M Mar 13 13:23 liballegro_monolith-debug.so.5.2
-rw-r--r-- 1 m m 5.4M Mar 13 13:23 liballegro_monolith-debug.so.5.2.8
-rw-r--r-- 1 m m 1.8M Mar 13 13:23 liballegro_monolith.so
-rw-r--r-- 1 m m 1.8M Mar 13 13:23 liballegro_monolith.so.5.2
-rw-r--r-- 1 m m 1.8M Mar 13 13:23 liballegro_monolith.so.5.2.8
-rw-r--r-- 1 m m 295K Mar 13 13:23 libdumb.a
-rw-r--r-- 1 m m 214K Mar 13 13:23 libdumb.so
-rw-r--r-- 1 m m 214K Mar 13 13:23 libdumb.so.1
-rw-r--r-- 1 m m 214K Mar 13 13:23 libdumb.so.1.0.0



----------

default is: 
prefer_static_deps:off
shared:on






remade allegro with:
prefer_static_deps:on
shared:off

that made liballegro_monolith-static.a

changed linker to -lallegro_monolith-static.a

errors when trying to link




remade allegro with:
prefer_static_deps:off
shared:off

same as last time




remade allegro with:
prefer_static_deps:on
shared:on

made a new liballegro_monolith
installed it

try to link and missing dumb stuff...
how to add that....put the libdum stuff back

still does not work....





copy libs from default locations to linux_libs in the pm folder:
(run this in the pm folder)

cp /usr/lib/liballegro_monolith* ./linux_libs
cp /usr/lib/x86_64-linux-gnu/libdumb* ./linux_libs

this copied everything...
-rw-r--r-- 1 m m 5.4M Mar 13 13:23 liballegro_monolith-debug.so
-rw-r--r-- 1 m m 5.4M Mar 13 13:23 liballegro_monolith-debug.so.5.2
-rw-r--r-- 1 m m 5.4M Mar 13 13:23 liballegro_monolith-debug.so.5.2.8
-rw-r--r-- 1 m m 1.8M Mar 13 13:23 liballegro_monolith.so
-rw-r--r-- 1 m m 1.8M Mar 13 13:23 liballegro_monolith.so.5.2
-rw-r--r-- 1 m m 1.8M Mar 13 13:23 liballegro_monolith.so.5.2.8
-rw-r--r-- 1 m m 295K Mar 13 13:23 libdumb.a
-rw-r--r-- 1 m m 214K Mar 13 13:23 libdumb.so
-rw-r--r-- 1 m m 214K Mar 13 13:23 libdumb.so.1
-rw-r--r-- 1 m m 214K Mar 13 13:23 libdumb.so.1.0.0

move libs from default locations so I can test:
mkdir /home/m/temp_linux_libs
sudo mv /usr/lib/liballegro_monolith* /home/m/temp_linux_libs
sudo mv /usr/lib/x86_64-linux-gnu/libdumb* /home/m/temp_linux_libs

to restore them:
sudo cp /home/m/temp_linux_libs/liballegro_monolith* /usr/lib
sudo cp /home/m/temp_linux_libs/libdumb* /usr/lib/x86_64-linux-gnu/


patchelf --print-rpath pm
patchelf --set-rpath './linux_libs' pm



try making allegro without dumb...remove modaudio...










In version 5.2.6 change log:

Acodec addon:

    Add MP3 support via the MiniMP3 library.

When I try to compile allegro from source, minimp3 is not found.

I followed SiegeLord's instructions here:

https://github.com/liballeg/allegro_wiki/wiki/Install-Allegro-from-source-on-Ubuntu


and installed this list of dependencies:

    sudo apt install git cmake build-essential

    Install various dependencies.

    sudo apt install libdumb1-dev \
                     libflac-dev \
                     libfreetype6-dev \
                     libgl1-mesa-dev \
                     libglu1-mesa-dev \
                     libgtk-3-dev \
                     libjpeg-dev \
                     libopenal-dev \
                     libphysfs-dev \
                     libpng-dev \
                     libpulse-dev \
                     libtheora-dev \
                     libvorbis-dev \
                     libwebp-dev \
                     libxext-dev \
                     libxxf86vm-dev \
                     libxrandr-dev \
                     libxinerama-dev \
                     libxpm-dev \
                     libopusfile-dev


But I don't think minimp3 is there.

when I run ccmake and select WANT_MP3

 Could NOT find MiniMP3 (missing: MINIMP3_INCLUDE_DIRS)
 WARNING: minimp3 was not found


i just found static runtime option in ccmke ??????






the easiest option I could find was to ditch the .xm format for the soundtrack
I tried mp3 but that required a codec as well
So I am going with wav

pm.xm    562K
pm.mp3  3827K 
pm.wav 27449K

30M...who gives a shit? It makes the program so much simpler....

now with the liballegro pointed at with rpath it is so much easier...




what are my linux allegro library things now?


$ cd allegro5/build/
m@mr5mx1:~/Desktop/allegro5/build
$ ccmake -DCMAKE_INSTALL_PREFIX=/usr ..

 ALLEGRO_PROJECT_NAME             ALLEGRO
 ALLEGRO_PROJECT_SUFFIX
 ALLEGRO_SDL                      OFF
 CMAKE_BUILD_TYPE                 Release
 DOC_GIT_REF
 FRAMEWORK_INSTALL_PREFIX         /Library/Frameworks
 FREETYPE_BZIP2                   OFF
 FREETYPE_HARFBUZZ                OFF
 FREETYPE_PNG                     OFF
 FREETYPE_ZLIB                    OFF
 GL_BUILD_TYPE                    auto
 LIB_SUFFIX
 NO_FPU                           OFF
 PREFER_STATIC_DEPS               OFF
 SHARED                           ON
 STRICT_WARN                      OFF
 WANT_ACODEC_DYNAMIC_LOAD         OFF
 WANT_ALLOW_SSE                   ON
 WANT_ALSA                        ON
 WANT_AQUEUE                      ON
 WANT_AUDIO                       ON
 WANT_COLOR                       ON
 WANT_CURL_EXAMPLE                OFF
 WANT_D3D                         OFF
 WANT_D3D9EX                      OFF
 WANT_DEMO                        OFF
 WANT_DLL_TLS                     OFF
 WANT_DOCS                        OFF
 WANT_DOCS_HTML                   OFF
 WANT_DOCS_INFO                   OFF
 WANT_DOCS_MAN                    OFF
 WANT_DOCS_PDF                    OFF
 WANT_DOCS_PDF_PAPER              OFF
 WANT_DSOUND                      ON
 WANT_EMBED                       OFF
 WANT_EXAMPLES                    OFF
 WANT_FLAC                        OFF
 WANT_FONT                        ON
 WANT_FRAMEWORKS                  OFF
 WANT_GLES3                       OFF
 WANT_IMAGE                       ON
 WANT_IMAGE_FREEIMAGE             ON
 WANT_IMAGE_JPG                   OFF
 WANT_IMAGE_PNG                   OFF
 WANT_IMAGE_WEBP                  OFF
 WANT_LUAJIT                      OFF
 WANT_MEMFILE                     ON
 WANT_MODAUDIO                    OFF
 WANT_MONOLITH                    ON
 WANT_MP3                         OFF
 WANT_MUDFLAP                     OFF
 WANT_NATIVE_DIALOG               ON
 WANT_NATIVE_IMAGE_LOADER         ON
 WANT_OGG_VIDEO                   OFF
 WANT_OPENAL                      OFF
 WANT_OPENGL                      ON
 WANT_OPENSL                      OFF
 WANT_OPUS                        OFF
 WANT_OSS                         OFF
 WANT_PHYSFS                      OFF
 WANT_POPUP_EXAMPLES              ON
 WANT_PRIMITIVES                  ON
 WANT_PULSEAUDIO                  ON
 WANT_PYTHON_WRAPPER              OFF
 WANT_RELEASE_LOGGING             ON
 WANT_SHADERS_D3D                 ON
 WANT_SHADERS_GL                  ON
 WANT_STATIC_RUNTIME              OFF
 WANT_TESTS                       OFF
 WANT_TREMOR                      OFF
 WANT_TTF                         ON
 WANT_VIDEO                       OFF
 WANT_VORBIS                      OFF
 WANT_WAIT_EVENT_SLEEP            OFF
 WANT_X11                         ON
 WANT_X11_XF86VIDMODE             ON
 WANT_X11_XINERAMA                ON
 WANT_X11_XRANDR                  ON
 WANT_X11_XSCREENSAVER            ON
 X11_xcb_icccm_INCLUDE_PATH       X11_xcb_icccm_INCLUDE_PATH-NOTFOUND
 X11_xcb_icccm_LIB                X11_xcb_icccm_LIB-NOTFOUND
 XCURSOR_LIB                      /usr/lib/x86_64-linux-gnu/libXcursor.so
 XINERAMA_LIB                     /usr/lib/x86_64-linux-gnu/libXinerama.so
 XPM_LIB                          /usr/lib/x86_64-linux-gnu/libXpm.so
 XRANDR_LIB                       /usr/lib/x86_64-linux-gnu/libXrandr.so


what else can I remove????

 WANT_ALSA                        ON
 WANT_AQUEUE                      ON
 WANT_POPUP_EXAMPLES              ON
 WANT_IMAGE_FREEIMAGE             ON
 WANT_SHADERS_D3D                 ON
 WANT_RELEASE_LOGGING             ON
 WANT_MEMFILE                     ON



now I have:



                                                   Page 1 of 1
 ALLEGRO_PROJECT_NAME             ALLEGRO
 ALLEGRO_PROJECT_SUFFIX
 ALLEGRO_SDL                      OFF
 CMAKE_BUILD_TYPE                 Release
 DOC_GIT_REF
 FRAMEWORK_INSTALL_PREFIX         /Library/Frameworks
 FREETYPE_BZIP2                   OFF
 FREETYPE_HARFBUZZ                OFF
 FREETYPE_PNG                     OFF
 FREETYPE_ZLIB                    OFF
 GL_BUILD_TYPE                    auto
 LIB_SUFFIX
 NO_FPU                           OFF
 PREFER_STATIC_DEPS               OFF
 SHARED                           ON
 STRICT_WARN                      OFF
 WANT_ACODEC_DYNAMIC_LOAD         OFF
 WANT_ALLOW_SSE                   ON
 WANT_ALSA                        OFF
 WANT_AQUEUE                      OFF
 WANT_AUDIO                       ON
 WANT_COLOR                       ON
 WANT_CURL_EXAMPLE                OFF
 WANT_D3D                         OFF
 WANT_D3D9EX                      OFF
 WANT_DEMO                        OFF
 WANT_DLL_TLS                     OFF
 WANT_DOCS                        OFF
 WANT_DOCS_HTML                   OFF
 WANT_DOCS_INFO                   OFF
 WANT_DOCS_MAN                    OFF
 WANT_DOCS_PDF                    OFF
 WANT_DOCS_PDF_PAPER              OFF
 WANT_DSOUND                      ON
 WANT_EMBED                       OFF
 WANT_EXAMPLES                    OFF
 WANT_FLAC                        OFF
 WANT_FONT                        ON
 WANT_FRAMEWORKS                  OFF
 WANT_GLES3                       OFF
 WANT_IMAGE                       ON
 WANT_IMAGE_FREEIMAGE             OFF
 WANT_IMAGE_JPG                   OFF
 WANT_IMAGE_PNG                   OFF
 WANT_IMAGE_WEBP                  OFF
 WANT_LUAJIT                      OFF
 WANT_MEMFILE                     OFF
 WANT_MODAUDIO                    OFF
 WANT_MONOLITH                    ON
 WANT_MP3                         OFF
 WANT_MUDFLAP                     OFF
 WANT_NATIVE_DIALOG               ON
 WANT_NATIVE_IMAGE_LOADER         OFF
 WANT_OGG_VIDEO                   OFF
 WANT_OPENAL                      OFF
 WANT_OPENGL                      ON
 WANT_OPENSL                      OFF
 WANT_OPUS                        OFF
 WANT_OSS                         OFF
 WANT_PHYSFS                      OFF
 WANT_POPUP_EXAMPLES              OFF
 WANT_PRIMITIVES                  ON
 WANT_PULSEAUDIO                  ON
 WANT_PYTHON_WRAPPER              OFF
 WANT_RELEASE_LOGGING             OFF
 WANT_SHADERS_D3D                 OFF
 WANT_SHADERS_GL                  ON
 WANT_STATIC_RUNTIME              OFF
 WANT_TESTS                       OFF
 WANT_TREMOR                      OFF
 WANT_TTF                         ON
 WANT_VIDEO                       OFF
 WANT_VORBIS                      OFF
 WANT_WAIT_EVENT_SLEEP            OFF
 WANT_X11                         ON
 WANT_X11_XF86VIDMODE             ON
 WANT_X11_XINERAMA                ON
 WANT_X11_XRANDR                  ON
 WANT_X11_XSCREENSAVER            ON
 X11_xcb_icccm_INCLUDE_PATH       X11_xcb_icccm_INCLUDE_PATH-NOTFOUND
 X11_xcb_icccm_LIB                X11_xcb_icccm_LIB-NOTFOUND
 XCURSOR_LIB                      /usr/lib/x86_64-linux-gnu/libXcursor.so
 XINERAMA_LIB                     /usr/lib/x86_64-linux-gnu/libXinerama.so
 XPM_LIB                          /usr/lib/x86_64-linux-gnu/libXpm.so
 XRANDR_LIB                       /usr/lib/x86_64-linux-gnu/libXrandr.so


 Allowing GCC/Clang to use SSE instructions
 Performing Test ALLEGRO_HAVE_PROCFS_ARGCV
 Performing Test ALLEGRO_HAVE_PROCFS_ARGCV - Failed
 Performing Test ALLEGRO_HAVE_SV_PROCFS_H
 Performing Test ALLEGRO_HAVE_SV_PROCFS_H - Failed
 ===========================
 Configuration summary
 ===========================
 - OpenGL: Desktop
 - Primitives addon: yes
 - Image addon: yes
  - FreeImage: NO
  - libpng: NO
  - libjpeg: NO
  - libwebp: NO
 - Font addon: yes
 - Audio addon: yes
  - OSS: NO
  - PulseAudio: yes
  - ALSA: NO
  - OpenAL: NO
  - OpenSL: NO
 - Acodec addon: yes
  - FLAC: NO
  - DUMB: NO
  - Ogg/Vorbis: NO
  - Opus: NO
  - MP3: NO
 - TTF addon: yes
 - Color addon: yes
 - Memfile addon: NO
 - PhysFS addon: NO
 - Native Dialog addon: yes
 - Video addon: NO
 ===========================
 Configuring done


make

sudo make install


compile and link project with: -Wl,-rpath='./linux_libs'




copy new lib

cp /usr/lib/liballegro_monolith.so.5.2 ./linux_libs




-----------------------
UPDATE-----------------
20220314
-----------------------

I figured it out!

Well kind of...

I found something that will work for me.

Setting -rpath works fine.

I can do it via the linker like this: -Wl,-rpath='./linux_libs'

Or I can do after building the executable like this: patchelf --set-rpath './linux_libs' pm


In both cases it finds my local copy of liballegro_monolith.so.5.2 in the linux_libs dir


I never did get it to find libdumb....

What I did was:

I realized that I only needed that because of the game theme music.
It was written and gifted to me by Russel Hoy who I have lost contact with years ago.
The format is .xm.
So what I thought I would do is convert it to mp3.
But then it turned out I need yet another audio codec.
So I converted it to .wav.
No codecs needed.
I was then able to remove that from the allegro library and have fewer dependencies.

It just makes things simpler all around, having less libraries to include.

The file is considerable bigger, but so what? It is so much simpler to use.

pm.xm    562K
pm.mp3  3827K 
pm.wav 27449K

Now I can distribute my game for linux systems with out the hassle of having to run a script to set LD_LIBRARY_PATH.

It may not seem like much, but I am a lot happier with it this way.

I am done trying to figure out why the other way did not work.

I just wanted to update this post in case anyone else is struggling with the same issue, maybe something here might help.




most distro's are missing:
I need to get it too...


libOpenGL.so.0 => /lib/x86_64-linux-gnu/libOpenGL.so.0

new script 'install_linux_libs'

mv ./linux_libs/liballegro_monolith.so.5.2  /usr/lib/
mv ./linux_libs/libOpenGL.so.0 /lib/x86_64-linux-gnu/

























