// ------------------------------------------------
// ---------------- lifts -----------------------
// ------------------------------------------------

struct lift
{
   float x;
   float y;
   float xinc;
   float yinc;
   float w;
   float h;
   float winc;
   float hinc;
   int active;
   int flags;
   int mode;
   int val1;
   int val2;
   int color;
   int current_step;
   int num_steps;
   int limit_counter;
   int limit_type;
   char lift_name[40];
};

struct lift_step
{
   int type;
   int x;
   int y;
   int w;
   int h;
   int val;
};


class mwLift
{
   public:

   struct lift       cur[NUM_LIFTS];
   struct lift_step  stp[NUM_LIFTS][40];
   char lift_step_type_name[10][10];
}

extern mwLift mLift;

mLift.cur   : 4480 bytes
mLift.stp   : 38400 bytes


// iterate lifts
for (int l=0; l<NUM_LIFTS; l++)
   if (cur[l].active)

// iterate steps
for (int s=0; s<cur[l].num_steps; s++)

// to get step type
int step_type = stp[l][s].type & 31;


------------------------------------------------------------------------
step types
------------------------------------------------------------------------
type 1 - move
x
y
w
h
val - speed of move or time to resize
------------------------------------------------------------------------
type 2 - wait time
x,y,w,h - not used
val - wait time
------------------------------------------------------------------------
type 3 - wait prox
x,y,w,h - not used
val - prox distance
------------------------------------------------------------------------
type 4 - end
x,y,w,h - not used
val
0 move to step 0
1 warp to step 0
2 stay here forever
------------------------------------------------------------------------
type 5 - wait event
x,y,w,h - not used
val - event
------------------------------------------------------------------------
type 6 - send event
x,y,w,h - not used
val - event
-----------------------------------------------------------------------


------------------------------------------------------------------------
The first step (stp[l][0]) is always type 1 - move.
The values of x, y, w, h are the initial lift values.
val is only used for moving TO this step
------------------------------------------------------------------------
The last step is always type 4 - end
val determines what happens from there
------------------------------------------------------------------------
In between the first and last step can be any arrangement of other steps
------------------------------------------------------------------------

lifts[lift].limit_type = 2; // wait time
lifts[lift].limit_counter;  // counts down to 0

lifts[lift].limit_type = 3; // wait prox
lifts[lift].limit_counter;  // proximity distance

lifts[lift].limit_type = 4; // move and resize timer
lifts[lift].limit_counter;  // counts down to 0

lifts[lift].limit_type = 5; // wait event
lifts[lift].limit_counter;  // event number

lifts[lift].limit_type = 6; // send event
lifts[lift].limit_counter;  // event number (not used in main lift body)


------------------------------------------------------------------------
lift modes
------------------------------------------------------------------------
lifts[lift].mode = 0; // default...normal

lifts[lift].mode = 1; // prox run and reset
lifts[lift].val1 = countdown timer
lifts[lift].val2 = reset value

other info embedded in lift_steps[l][s].type

#define PM_LIFT_COLOR_BITS       0b11110000000000000000000000000000
#define PM_LIFT_NO_DRAW          0b00001000000000000000000000000000
#define PM_LIFT_SOLID_PLAYER     0b00000100000000000000000000000000
#define PM_LIFT_SOLID_ENEMY      0b00000010000000000000000000000000
#define PM_LIFT_SOLID_ITEM       0b00000001000000000000000000000000


how to change color embedded in lift_steps[][].type
int cf = color << 28; // shift 4 bits of color into place
lift_steps[num][type].type &= 0b00001111111111111111111111111111; // clear old color
lift_steps[num][type].type |= cf; // merge color with type


how to get color:
int col = (lifts[l].flags >> 28) & 15;
int col = (lift_steps[l][s].type >> 28) & 15;



