Last updated 20230902

---------------------------------------------------------------------------------
-------------   The official list of how logging works: -------------------------
---------------------------------------------------------------------------------


#define LOG_error                  9
#define LOG_net                    10
#define LOG_net_join               11
#define LOG_net_game_init          20
#define LOG_net_ending_stats       22
#define LOG_net_bandwidth_bytes    23
#define LOG_net_bandwidth_packets  24
#define LOG_net_player_array       26
#define LOG_net_stdf               27
#define LOG_net_stdf_packets       28
#define LOG_net_dif_applied        30
#define LOG_net_dif_not_applied    31
#define LOG_net_server_rx_stak     33
#define LOG_net_cdat               35
#define LOG_net_client_ping        36
#define LOG_net_timer_adjust       37

#define LOG_tmr                    44
#define LOG_tmr_cpu                70
#define LOG_tmr_rebuild_bitmaps    72
#define LOG_tmr_move_tot           74
#define LOG_tmr_move_all           75
#define LOG_tmr_move_enem          76
#define LOG_tmr_draw_tot           80
#define LOG_tmr_draw_all           81
#define LOG_tmr_bmsg_add           84
#define LOG_tmr_bmsg_draw          85
#define LOG_tmr_scrn_overlay       87
#define LOG_tmr_sdif               90
#define LOG_tmr_cdif               91
#define LOG_tmr_rwnd               92
#define LOG_tmr_client_timer_adj   95
#define LOG_tmr_client_ping        96


#define LOG_ACTION_PRINT  0b001
#define LOG_ACTION_LOG    0b010
#define LOG_ACTION_ERROR  0b100




In mwLog there is an array of stucts for each log type:
I use the defines for the array index, so that it is human readable in code.


struct log_type
{
   int group; // 0=unused, 1=net, 2=timer, 3=other
   int action; // 001=print_to_console, 010=log_to_file, 100=error_dialog
   char name[40];
};

struct log_type log_types[100];

This array is saved to file in settings.pm.
When initially created it is set up with this code:


void mwLog::init_log_types(void)
{
   //printf("init log types\n");
   int i;
   for (i=0; i<100; i++)
   {
      log_types[i].group = 0;
      log_types[i].action = 0;
      strcpy(log_types[i].name, "");
   }

   i = LOG_error;                   log_types[i].group = 9;   strcpy(log_types[i].name, "LOG_error"); log_types[i].action = 7;   // always all three actions

   i = LOG_net;                     log_types[i].group = 1;   strcpy(log_types[i].name, "LOG_net");
   i = LOG_net_join;                log_types[i].group = 1;   strcpy(log_types[i].name, "LOG_net_join");
   i = LOG_net_game_init;           log_types[i].group = 1;   strcpy(log_types[i].name, "LOG_net_game_init");
   i = LOG_net_ending_stats;        log_types[i].group = 1;   strcpy(log_types[i].name, "LOG_net_ending_stats");
   i = LOG_net_bandwidth_bytes;     log_types[i].group = 1;   strcpy(log_types[i].name, "LOG_net_bandwidth_bytes");
   i = LOG_net_bandwidth_packets;   log_types[i].group = 1;   strcpy(log_types[i].name, "LOG_net_bandwidth_packets");
   i = LOG_net_player_array;        log_types[i].group = 1;   strcpy(log_types[i].name, "LOG_net_player_array");
   i = LOG_net_stdf;                log_types[i].group = 1;   strcpy(log_types[i].name, "LOG_net_stdf");
   i = LOG_net_stdf_packets;        log_types[i].group = 1;   strcpy(log_types[i].name, "LOG_net_stdf_packets");
   i = LOG_net_dif_applied;         log_types[i].group = 1;   strcpy(log_types[i].name, "LOG_net_dif_applied");
   i = LOG_net_dif_not_applied;     log_types[i].group = 1;   strcpy(log_types[i].name, "LOG_net_dif_not_applied");
   i = LOG_net_server_rx_stak;      log_types[i].group = 1;   strcpy(log_types[i].name, "LOG_net_server_rx_stak");
   i = LOG_net_cdat;                log_types[i].group = 1;   strcpy(log_types[i].name, "LOG_net_cdat");
   i = LOG_net_client_ping;         log_types[i].group = 1;   strcpy(log_types[i].name, "LOG_net_client_ping");
   i = LOG_net_timer_adjust;        log_types[i].group = 1;   strcpy(log_types[i].name, "LOG_net_timer_adjust");

   i = LOG_tmr_cpu;                 log_types[i].group = 2;   strcpy(log_types[i].name, "LOG_tmr_cpu");
   i = LOG_tmr_rebuild_bitmaps;     log_types[i].group = 2;   strcpy(log_types[i].name, "LOG_tmr_rebuild_bitmaps");
   i = LOG_tmr_move_tot;            log_types[i].group = 2;   strcpy(log_types[i].name, "LOG_tmr_move_tot");
   i = LOG_tmr_move_all;            log_types[i].group = 2;   strcpy(log_types[i].name, "LOG_tmr_move_all");
   i = LOG_tmr_move_enem;           log_types[i].group = 2;   strcpy(log_types[i].name, "LOG_tmr_move_enem");
   i = LOG_tmr_draw_tot;            log_types[i].group = 2;   strcpy(log_types[i].name, "LOG_tmr_draw_tot");
   i = LOG_tmr_draw_all;            log_types[i].group = 2;   strcpy(log_types[i].name, "LOG_tmr_draw_all");
   i = LOG_tmr_bmsg_add;            log_types[i].group = 2;   strcpy(log_types[i].name, "LOG_tmr_bmsg_add");
   i = LOG_tmr_bmsg_draw;           log_types[i].group = 2;   strcpy(log_types[i].name, "LOG_tmr_bmsg_draw");
   i = LOG_tmr_scrn_overlay;        log_types[i].group = 2;   strcpy(log_types[i].name, "LOG_tmr_scrn_overlay");
   i = LOG_tmr_sdif;                log_types[i].group = 2;   strcpy(log_types[i].name, "LOG_tmr_sdif");
   i = LOG_tmr_cdif;                log_types[i].group = 2;   strcpy(log_types[i].name, "LOG_tmr_cdif");
   i = LOG_tmr_rwnd;                log_types[i].group = 2;   strcpy(log_types[i].name, "LOG_tmr_rwnd");
   i = LOG_tmr_client_timer_adj;    log_types[i].group = 2;   strcpy(log_types[i].name, "LOG_tmr_client_timer_adj");
   i = LOG_tmr_client_ping;         log_types[i].group = 2;   strcpy(log_types[i].name, "LOG_tmr_client_ping");
}

Each type has an action that is made of these bitfields:

#define LOG_ACTION_PRINT  0b001
#define LOG_ACTION_LOG    0b010
#define LOG_ACTION_ERROR  0b100

These are all configureable from the settings pages.

Then in code, when I want to log something, I can do it with a single line like this:

mLog.addf(LOG_net_stdf, 0, "stdf saved server state[1]:%d\n", frame_num);

Depending on the actions for that type, it will print to console, or save to file..









--------------------------------------------------------
LOG_net_error [9] [both]
--------------------------------------------------------
this is always on and always does all three actions, print, log and error dialog

Only used for client and server setup

client: 
mLog.add_fw(LOG_error, 0, 76, 10, "|", " ", "Error: failed to initialize network");
mLog.add_fw(LOG_error, 0, 76, 10, "|", " ", "Error: Client failed to create netconnection (TCP)");
mLog.add_fwf(LOG_error, 0, 76, 10, "|", " ", "Error: Client failed to set netconnection target: server[%s] (TCP)", serveraddress);
mLog.add_fw(LOG_error, 0, 76, 10, "|", " ", "Error: Client failed to create netchannel (UDP)");
mLog.add_fwf(LOG_error, 0, 76, 10, "|", " ", "Error: Client failed to set netchannel target: server[%s] (UDP)", serveraddress);
mLog.add_fw(LOG_error, 0, 76, 10, "|", " ", "Did not get reply from server");
mLog.add_fw(LOG_error, 0, 76, 10, "|", " ", "TCP response Error!");
mLog.add_fw(LOG_error, 0, 76, 10, "|", " ", "Cancelled");


server:
mLog.add_fw(LOG_error, 0, 76, 10, "|", " ", "Error: failed to initialize network");
mLog.add_fw(LOG_error, 0, 76, 10, "|", " ", "Error opening connection");
mLog.add_fw(LOG_error, 0, 76, 10, "|", " ", "Error listening on connection");
mLog.add_fw(LOG_error, 0, 76, 10, "|", " ", "Error opening listening channel");
mLog.add_fw(LOG_error, 0, 76, 10, "|", " ", "Error assigning target to listening channel");
mLog.add_fwf(LOG_error, 0, 76, 10, "+", "-", "Error: failed to open channel for %s\n", address);
mLog.add_fwf(LOG_error, 0, 76, 10, "+", "-", "Error: couldn't assign target `%s' to channel\n", address);
mLog.add_fw(LOG_error, 0, 76, 10, "|", " ", "Error Initializing Server Network");

doone..




--------------------------------------------------------
LOG_net_stdf [27] [both]
--------------------------------------------------------
mwNetgame::server_rewind(void)                mLog.addf(LOG_net_stdf, 0, "stdf rewind to:%d\n", srv_client_state_frame_num[0][1]);
mwNetgame::server_create_new_state(void)      mLog.addf(LOG_net_stdf, 0, "stdf saved server state[1]:%d\n", mLoop.frame_num);
mwNetgame::server_send_dif(int p)             mLog.addf(LOG_net_stdf, 0, "tx stdf p:%d [src:%d dst:%d] cmp:%d ratio:%3.2f .....

// 20 - server new game
   mLog.addf(LOG_net_stdf, 0, 0, "stdf saved server state[1]:%d\n", frame_num);

void mwLoop::setup_common_after_level_load(void)
   mLog.addf(LOG_net_stdf, 0, 0, "stdf saved server state[1]:%d\n", frame_num);

void mwNetgame::client_process_stdf_packet(double timestamp)
   mLog.addf(LOG_net_stdf, p, "rx dif complete [%d to %d] dsync[%3.1fms] - uncompressed\n", src, dst, mPlayer.loc[p].dsync*1000);
   mLog.addf(LOG_net_stdf, p, "rx dif complete [%d to %d] dsync[%3.1f] - bad uncompress\n", src, dst, mPlayer.loc[p].dsync*1000);

done...tested


--------------------------------------------------------
LOG_net_stdf_packets [28] [both]
--------------------------------------------------------
mwNetgame::server_send_dif(int p) mLog.addf(LOG_net_stdf_packets, 0, "tx stdf piece [%d of %d] [%d to %d] st:%4d sz:%4d\n",
mwNetgame::client_process_stdf_packet() mLog.addf(LOG_net_stdf_packets, p, "rx stdf piece [%d of %d] [%d to %d] st:%4d sz:%...
done...tested


--------------------------------------------------------
LOG_net_server_rx_stak [33] [server]
--------------------------------------------------------
mwNetgame::server_proc_stak_packet(double timestamp)  mLog.addf(LOG_net_server_rx_stak, p, "rx stak d[%4.1f] c[%4.1f] a:%d c:%d %s\n", ...
done...


--------------------------------------------------------
LOG_net_cdat [35] [both]
--------------------------------------------------------

mwNetgame::server_proc_cdat_packet() mLog.addf(LOG_net_cdat, p, "rx cdat p:%d fn:[%d] sync:[%d] late - droppped\n", p, cdat_frame_num, 
mwNetgame::server_proc_cdat_packet() mLog.addf(LOG_net_cdat, p, "rx cdat p:%d fn:[%d] sync:[%d] gmep:[%d] - entered\n", p, cdat_frame_num, 
mwPlayer::proc_player_input(void) mLog.addf(LOG_net_cdat, p, "tx cdat - move:%d\n", loc[p].comp_move);
done...



--------------------------------------------------------
LOG_net_client_timer_adj [36] [client]
--------------------------------------------------------
mwNetgame::client_timer_adjust(void) mLog.addf(LOG_net_timer_adjust, p, "timer adjust dsync[%3.2f] offset[%3.2f] fps_chase[%3.3f]\n", ...
done...


--------------------------------------------------------
LOG_net_client_ping [37] [client]
--------------------------------------------------------
mwNetgame::client_fast_packet_loop() mLog.addf(LOG_net_client_ping, p, "ping [%3.2f] avg[%3.2f]\n", mPlayer.loc[p].ping*1000, mPlayer.loc[p].ping_avg*1000);
done...


--------------------------------------------------------
LOG_net_dif_applied [30] [client]
--------------------------------------------------------
mwNetgame::client_apply_dif()
   mLog.addf(LOG_net_dif_applied, p, "dif [%d to %d] applied - %s", client_state_dif_src, client_state_dif_dst, tmsg);

--------------------------------------------------------
LOG_net_dif_not_applied [31] [client]
--------------------------------------------------------
mwNetgame::client_apply_dif()
   mLog.addf(LOG_net_dif_not_applied, p, "dif is not valid - src:%d dst:%d\n", client_state_dif_src, client_state_dif_dst);
   mLog.addf(LOG_net_dif_not_applied, p, "dif_src is > 100 frames in the future - src:%d mLoop.frame_num:%d\n", client_state_dif_src, mLoop.frame_num);
   mLog.addf(LOG_net_dif_not_applied, p, "dif [%d to %d] not applied - not newer than current [%d]\n", client_state_dif_src, client_state_dif_dst,                mLog.addf(LOG_net_dif_not_applied, p, "Resetting client base state to zero\n");
   mLog.addf(LOG_net_dif_not_applied, p, "dif cannot be applied (wrong client base) %d %d\n", client_state_base_frame_num, client_state_dif_src);
   mLog.addf(LOG_net_dif_not_applied, p, "dif [%d to %d] not applied yet - [%d] early\n", client_state_dif_src, client_state_dif_dst, -ff);



--------------------------------------------------------
LOG_net_bandwidth_bytes [23] [both]
--------------------------------------------------------
mwNetgame::process_bandwidth_counters() mLog.addf(LOG_net_bandwidth_bytes, p, "bandwidth (B/s) TX cur:[%5d] max:[%5d] RX cur:[%5d] max:[%5d]\n", 
done...tested on both client and server

--------------------------------------------------------
LOG_net_bandwidth_packets [24] [both]
--------------------------------------------------------
mwNetgame::process_bandwidth_counters()  mLog.addf(LOG_net_bandwidth_packets, p, "packets per s TX cur:[%3d] max:[%3d] RX cur:[%3d] max:[%3d]\n", 
done...tested...no graph


--------------------------------------------------------
LOG_net_player_array [26] [server]
--------------------------------------------------------
mwNetgame::server_control()
   mLog.log_player_array2(LOG_net_player_array);

do some testing of this one...it works, not sure how useful
done...tested


--------------------------------------------------------
LOG_net_join [11] [both]
--------------------------------------------------------


   //---------------------------------------
   // 21 - client wait for intial state
   //---------------------------------------
   mLog.add_headerf(LOG_net_join, p, 1, "Game state updated - starting chase and lock");


mwNetgame::client_process_sjon_packet(void)
   mLog.add(mLog.LOG_net_join, 11, "Server replied with 'SERVER FULL'\n");

      mLog.add_fwf(11, 0, 76, 10, "|", " ", "Client received join invitation from server");
      mLog.add_fwf(11, 0, 76, 10, "|", " ", "Level:[%d]", mLevel.play_level);
      mLog.add_fwf(11, 0, 76, 10, "|", " ", "Player Number:[%d]", p);
      mLog.add_fwf(11, 0, 76, 10, "|", " ", "Player Color:[%d]", color);
      mLog.add_fwf(11, 0, 76, 10, "|", " ", "Server Frame Num:[%d]", server_sjon_frame_num);
      mLog.add_fwf(11, 0, 76, 10, "|", " ", "Deathmatch player shots:[%d]", mShot.deathmatch_shots);
      mLog.add_fwf(11, 0, 76, 10, "|", " ", "Deathmatch player shot damage:[%d]", mShot.deathmatch_shot_damage);
      mLog.add_fwf(11, 0, 76, 10, "|", " ", "Suicide player shots:[%d]", mShot.suicide_shots);
      mLog.add_fwf(11, 0, 76, 10, "+", "-", "");

mwNetgame::server_lock_client(int p)
      mLog.addf(LOG_net_join, p, "Player:%d has locked and will become active in 4 frames!", p);


mwNetgame::server_proc_cjon_packet(int who)


   mLog.add_fwf(LOG_net_join, 0, 76, 10, "+", "-", "");
   mLog.add_fwf(LOG_net_join, 0, 76, 10, "|", " ", "Server received join request from %s requesting color:%d", temp_name, color);

      mLog.add_fwf(LOG_net_join, 0, 76, 10, "|", " ", "Reply sent: 'SERVER FULL'");
      mLog.add_fwf(LOG_net_join, 0, 76, 10, "+", "-", "");

      mLog.add_fwf(LOG_net_join, 0, 76, 10, "|", " ", "Server replied with join invitation:");
      mLog.add_fwf(LOG_net_join, 0, 76, 10, "|", " ", "Level:[%d]", mLevel.play_level);
      mLog.add_fwf(LOG_net_join, 0, 76, 10, "|", " ", "Player Number:[%d]", cn);
      mLog.add_fwf(LOG_net_join, 0, 76, 10, "|", " ", "Player Color:[%d]", color);
      mLog.add_fwf(LOG_net_join, 0, 76, 10, "|", " ", "Server mLoop.frame_num:[%d]", mLoop.frame_num);
      mLog.add_fwf(LOG_net_join, 0, 76, 10, "|", " ", "Deathmatch player shots:[%d]", mShot.deathmatch_shots);
      mLog.add_fwf(LOG_net_join, 0, 76, 10, "|", " ", "Deathmatch player shot damage:[%d]", mShot.deathmatch_shot_damage);
      mLog.add_fwf(LOG_net_join, 0, 76, 10, "|", " ", "Suicide player shots:[%d]", mShot.suicide_shots);
      mLog.add_fwf(LOG_net_join, 0, 76, 10, "+", "-", "");


--------------------------------------------------------
LOG_net_ending_stats  22
--------------------------------------------------------

mwGameMoves::proc_player_inactive_game_move()

      // ------------------------------------
      // local server player quit
      // ------------------------------------
         mLog.log_ending_stats_server(LOG_net_ending_stats);

      // ------------------------------------
      // remote player quit (server only)
      // ------------------------------------
         mLog.log_ending_stats_client(LOG_net_ending_stats, p);

   //---------------------------------------
   // 12 - Next Level
   //---------------------------------------
      if (mNetgame.ima_client) mLog.log_ending_stats_client(LOG_net_ending_stats, mPlayer.active_local_player);
      if (mNetgame.ima_server) mLog.log_ending_stats_server(LOG_net_ending_stats);


void mwNetgame::client_proc_player_drop(void)
   mLog.log_ending_stats_client(LOG_net_ending_stats, p);
   mLog.log_ending_stats_client(LOG_net_ending_stats, p);

done...not tested






































--------------------------------------------------------
LOG_net [10] [both]
--------------------------------------------------------

mwGameMoves::proc_player_active_game_move() mLog.add_headerf(LOG_net, p, 1, "PLAYER:%d became ACTIVE color:%d", p, mPlayer.syn[p].color);

mwGameMoves::proc_player_inactive_game_move() mLog.add_headerf(LOG_net, p, 1, "PLAYER:%d became INACTIVE", p);


   //---------------------------------------
   // 22 - client level setup
   //---------------------------------------
      mLog.add_headerf(LOG_net, 0, 3, "LEVEL %d STARTED", mLevel.play_level);


   //---------------------------------------
   // 12 - Next Level
   //---------------------------------------
      mLog.add_headerf(LOG_net, 0, 3, "NEXT LEVEL:%d", mPlayer.syn[0].level_done_next_level);


mwNetgame::client_proc_player_drop(void)
         mLog.add_fwf(LOG_net, p, 76, 10, "+", "-", "");
         mLog.add_fwf(LOG_net, p, 76, 10, "|", " ", "Local Player Client %d Lost Server Connection!", p);
         mLog.add_fwf(LOG_net, p, 76, 10, "|", " ", "mLoop.frame_num:[%d] last_stdf_rx:[%d] dif:[%d]", mLoop.frame_num, lsf, ss);
         mLog.add_fwf(LOG_net, p, 76, 10, "+", "-", "");


void mwPlayer::proc_player_health(int p) mLog.add_headerf(LOG_net, p, 1, "PLAYER:%d DIED!", p);






--------------------------------------------------------
--------------------------------------------------------
Profile Logging with LOG_tmr entries
--------------------------------------------------------
--------------------------------------------------------

These work a little differently than other logging.
They are used to record the time something took to complete.

For example, how long it took to draw all items.

These log files are meant to be opened in the profile graph viewer.

All profile log entries are saved to the log file with type 44.

The other type number is used in the code to determine whether or not they will be logged or ignored.

#define LOG_tmr                    44
#define LOG_tmr_cpu                70
#define LOG_tmr_rebuild_bitmaps    72
#define LOG_tmr_move_tot           74
#define LOG_tmr_move_all           75
#define LOG_tmr_move_enem          76
#define LOG_tmr_draw_tot           80
#define LOG_tmr_draw_all           81
#define LOG_tmr_bmsg_add           84
#define LOG_tmr_bmsg_draw          85
#define LOG_tmr_scrn_overlay       87
#define LOG_tmr_sdif               90
#define LOG_tmr_cdif               91
#define LOG_tmr_rwnd               92
#define LOG_tmr_client_timer_adj   95
#define LOG_tmr_client_ping        96



--------------------------------------------------------
LOG_tmr_cpu
--------------------------------------------------------
single entry cpu


--------------------------------------------------------
LOG_tmr_rebuild_bitmaps
--------------------------------------------------------
when the display changes and the bitmaps need to be rebuilt
logs various things and total.


--------------------------------------------------------
LOG_tmr_move_tot
--------------------------------------------------------
total time to move everything



--------------------------------------------------------
LOG_tmr_move_all
--------------------------------------------------------
time to move each object type and total



--------------------------------------------------------
LOG_tmr_move_enem
--------------------------------------------------------
time to move each enemy class


--------------------------------------------------------
LOG_tmr_draw_tot
--------------------------------------------------------
total time to draw everything



--------------------------------------------------------
LOG_tmr_draw_all
--------------------------------------------------------
time to draw each object type and total


--------------------------------------------------------
LOG_tmr_bmsg_add
--------------------------------------------------------
time to add a new bmsg


--------------------------------------------------------
LOG_tmr_bmsg_draw
--------------------------------------------------------
time to draw all bmsg


--------------------------------------------------------
LOG_tmr_scrn_overlay
--------------------------------------------------------
time to draw each element of screen overlay

--------------------------------------------------------
LOG_tmr_sdif
--------------------------------------------------------
server only

the time it takes for: 

mNetgame.server_create_new_state();

which creates a new state and sends it to all clients



--------------------------------------------------------
LOG_tmr_rwnd
--------------------------------------------------------
server only

the time it takes for: 

void mwNetgame::server_rewind(void)






--------------------------------------------------------
LOG_tmr_cdif
--------------------------------------------------------
currently not used




--------------------------------------------------------
LOG_tmr_client_timer_adj
--------------------------------------------------------
client only

shows variables used in: 

void mwNetgame::client_timer_adjust(void)



--------------------------------------------------------
LOG_tmr_client_ping
--------------------------------------------------------
client only

shows ping and ping average

























































------------------------------------------------------------------------
------------------------------------------------------------------------
special graphs
------------------------------------------------------------------------
------------------------------------------------------------------------




------------------------------------------------------------------------
Bandwidth Graph
------------------------------------------------------------------------
server and client

need to enable 'LOG_net_bandwidth_bytes'

open in log file viewer and click "Bandwidth Graph"

currently nothing for packets


------------------------------------------------------------------------
Client Sync Graph
------------------------------------------------------------------------
server only

need to enable 'LOG_net' and 'LOG_net_server_rx_stak'

open in log file viewer and click "Client Sync Graph"

shows per client:
when they come active and inactive
FPS chase
D Sync



------------------------------------------------------------------------
Ping Graph
------------------------------------------------------------------------
client only

need to enable 'LOG_tmr_client_timer_adj' and 'LOG_tmr_client_ping'

open in log file viewer and click "Ping Graph"

shows ping and ping average
shows dsync, offset and chase

