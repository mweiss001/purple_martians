Last updated 20230831

---------------------------------------------------------------------------------
-------------   The official list of how logging works: -------------------------
---------------------------------------------------------------------------------

Just for netgame, timer logging not covered. (yet)


#define LOG_error                  9
#define LOG_net                    10
#define LOG_net_join               11
#define LOG_net_game_init          20
#define LOG_net_ending_stats       22
#define LOG_net_bandwidth_bytes    23
#define LOG_net_bandwidth_packets  24
#define LOG_net_player_array       26
#define LOG_net_stdf               27
#define LOG_net_stdf_packets       28
#define LOG_net_dif_applied        30
#define LOG_net_dif_not_applied    31
#define LOG_net_server_rx_stak     33
#define LOG_net_cdat               35
#define LOG_net_client_ping        36
#define LOG_net_timer_adjust       37


#define LOG_ACTION_PRINT  0b001
#define LOG_ACTION_LOG    0b010
#define LOG_ACTION_ERROR  0b100





--------------------------------------------------------
LOG_net_stdf [27] [both]
--------------------------------------------------------
mwNetgame::server_rewind(void)                mLog.addf(LOG_net_stdf, 0, "stdf rewind to:%d\n", srv_client_state_frame_num[0][1]);
mwNetgame::server_create_new_state(void)      mLog.addf(LOG_net_stdf, 0, "stdf saved server state[1]:%d\n", mLoop.frame_num);
mwNetgame::server_send_dif(int p)             mLog.addf(LOG_net_stdf, 0, "tx stdf p:%d [src:%d dst:%d] cmp:%d ratio:%3.2f .....




   //---------------------------------------
   // 20 - server new game
   //---------------------------------------
   mLog.addf(LOG_net_stdf, 0, 0, "stdf saved server state[1]:%d\n", frame_num);



void mwLoop::setup_common_after_level_load(void)

   if (mNetgame.ima_server) // set server initial state
   {
      mLog.addf(LOG_net_stdf, 0, 0, "stdf saved server state[1]:%d\n", frame_num);
   }


void mwNetgame::client_process_stdf_packet(double timestamp)

         mLog.addf(LOG_net_stdf, p, "rx dif complete [%d to %d] dsync[%3.1fms] - uncompressed\n", src, dst, mPlayer.loc[p].dsync*1000);
         mLog.addf(LOG_net_stdf, p, "rx dif complete [%d to %d] dsync[%3.1f] - bad uncompress\n", src, dst, mPlayer.loc[p].dsync*1000);

done




--------------------------------------------------------
LOG_net_stdf_packets [28] [both]
--------------------------------------------------------
mwNetgame::server_send_dif(int p) mLog.addf(LOG_net_stdf_packets, 0, "tx stdf piece [%d of %d] [%d to %d] st:%4d sz:%4d\n",
mwNetgame::client_process_stdf_packet() mLog.addf(LOG_net_stdf_packets, p, "rx stdf piece [%d of %d] [%d to %d] st:%4d sz:%...
done...


--------------------------------------------------------
LOG_net_server_rx_stak [33] [server]
--------------------------------------------------------
mwNetgame::server_proc_stak_packet(double timestamp)  mLog.addf(LOG_net_server_rx_stak, p, "rx stak d[%4.1f] c[%4.1f] a:%d c:%d %s\n", ...
done...


--------------------------------------------------------
LOG_net_cdat [35] [both]
--------------------------------------------------------

mwNetgame::server_proc_cdat_packet() mLog.addf(LOG_net_cdat, p, "rx cdat p:%d fn:[%d] sync:[%d] late - droppped\n", p, cdat_frame_num, 
mwNetgame::server_proc_cdat_packet() mLog.addf(LOG_net_cdat, p, "rx cdat p:%d fn:[%d] sync:[%d] gmep:[%d] - entered\n", p, cdat_frame_num, 
mwPlayer::proc_player_input(void) mLog.addf(LOG_net_cdat, p, "tx cdat - move:%d\n", loc[p].comp_move);
done...



--------------------------------------------------------
LOG_net_client_timer_adj [36] [client]
--------------------------------------------------------
mwNetgame::client_timer_adjust(void) mLog.addf(LOG_net_timer_adjust, p, "timer adjust dsync[%3.2f] offset[%3.2f] fps_chase[%3.3f]\n", ...
done...





--------------------------------------------------------
LOG_net_client_ping [37] [client]
--------------------------------------------------------
mwNetgame::client_fast_packet_loop() mLog.addf(LOG_net_client_ping, p, "ping [%3.2f] avg[%3.2f]\n", mPlayer.loc[p].ping*1000, mPlayer.loc[p].ping_avg*1000);
done...




--------------------------------------------------------
LOG_net_dif_applied [30] [client]
--------------------------------------------------------
mwNetgame::client_apply_dif() mLog.addf(LOG_net_dif_applied, p, "dif [%d to %d] applied - %s", client_state_dif_src, client_state_dif_dst, tmsg);







--------------------------------------------------------
LOG_net_dif_not_applied [31] [client]
--------------------------------------------------------
mwNetgame::client_apply_dif()

      mLog.addf(LOG_net_dif_not_applied, p, "dif is not valid - src:%d dst:%d\n", client_state_dif_src, client_state_dif_dst);
      mLog.addf(LOG_net_dif_not_applied, p, "dif_src is > 100 frames in the future - src:%d mLoop.frame_num:%d\n", client_state_dif_src, mLoop.frame_num);
      mLog.addf(LOG_net_dif_not_applied, p, "dif [%d to %d] not applied - not newer than current [%d]\n", client_state_dif_src, client_state_dif_dst,                mLog.addf(LOG_net_dif_not_applied, p, "Resetting client base state to zero\n");
      mLog.addf(LOG_net_dif_not_applied, p, "dif cannot be applied (wrong client base) %d %d\n", client_state_base_frame_num, client_state_dif_src);
      mLog.addf(LOG_net_dif_not_applied, p, "dif [%d to %d] not applied yet - [%d] early\n", client_state_dif_src, client_state_dif_dst, -ff);





--------------------------------------------------------
LOG_net_bandwidth_bytes [23] [both]
--------------------------------------------------------
mwNetgame::process_bandwidth_counters() mLog.addf(LOG_net_bandwidth_bytes, p, "bandwidth (B/s) TX cur:[%5d] max:[%5d] RX cur:[%5d] max:[%5d]\n", 
done

--------------------------------------------------------
LOG_net_bandwidth_packets [24] [both]
--------------------------------------------------------
mwNetgame::process_bandwidth_counters()  mLog.addf(LOG_net_bandwidth_packets, p, "packets per s TX cur:[%3d] max:[%3d] RX cur:[%3d] max:[%3d]\n", 
done




--------------------------------------------------------
LOG_net_player_array [26] [server]
--------------------------------------------------------

void mwNetgame::server_control()
{

   if (mLog.LOG_NET_player_array) mLog.log_player_array2();


this will need some work...

do some test of this one....
























///////////////////////////////////////////////////////////

old......























--------------------------------------------------------
LOG_NET [10] [both]
--------------------------------------------------------
8 x  ClientInitNetwork()
1 x ClientExitNetwork()
2 x client_init()
3 x client_proc_player_drop()

6 x ServerInitNetwork()
4 x ServerListen()
1 x ServerExitNetwork()
3 x server_init()
3 x server_proc_player_drop()

1 x proc_player_active_game_move()
3 x proc_player_inactive_game_move()

   //---------------------------------------
   // 22 - client level setup
   //---------------------------------------
   if (program_state == 22)
   if (LOG_NET)
   {
      sprintf(msg,"LEVEL %d STARTED", play_level);
      add_log_entry_header(10, 0, msg, 3);
   }

   //---------------------------------------
   // 12 - level done
   //---------------------------------------
   if (program_state == 12)
   {
      if (LOG_NET) { sprintf(msg,"NEXT LEVEL:%d", next_level); add_log_entry_header(10, 0, msg, 3); }

      if (LOG_NET)
      {
         sprintf(msg,"LEVEL %d STARTED", play_level);
         add_log_entry_header(10, 0, msg, 3);
      }

   //---------------------------------------
   // server new game
   //---------------------------------------
   if (program_state == 20)
   {
      if (LOG_NET)
      {
         sprintf(msg,"LEVEL %d STARTED", play_level);
         add_log_entry_header(10, 0, msg, 3);
      }

1 x void proc_player_health(int p)
{
      sprintf(msg,"PLAYER:%d DIED!", p);
      if (LOG_NET) add_log_entry_header(10, 0, msg, 1);


--------------------------------------------------------
LOG_NET_join [11] [both]
--------------------------------------------------------
client tx cjon
client rx sjon
client rx sjon SERVER FULL
server rx cjon
server tx sjon
server tx sjon SERVER FULL
server client has locked

