Setting up a remote headless server

20240211

Follow the instructions to set up a dev system on ubuntu:
'pm_docs\dev setup\linux\ubuntu_dev_setup_20230824.txt'

This will be a non-gui version of ubuntu.

You will do all administering remotely, via ssh and other tools.

So obviously you need to know the IP address, and ideally it should be static.

When I do the official pm server, I will get a static IP and save with the release.

96.45.13.220

The place to save it is in the config:

   val = al_get_config_value(cfg, "NETWORK", "server_IP");
   if (!val) sprintf(mNetgame.serveraddress, "96.45.13.220");
   else sprintf(mNetgame.serveraddress, "%s", val);

ssh into the server
cd ~/dev/purple_martians


---------------------------------------------------------
Starting and stopping the purple martians server process
---------------------------------------------------------

ssh into the server
cd ~/dev/purple_martians

./pm -sh
(this will only run as long as the ssh session is alive)

nohup ./pm -sh &
(this will stay running after the ssh session is ended)

top
(to show the process running)

kill <PID>
(to stop the process)

trying to run a 2nd instance fails when a opening a listening channel...


-------------------------------------
- Using systemd to run as a service -
-------------------------------------

sudo nano /etc/systemd/system/pm.service

# pm.service

[Unit]
Description= Purple Martians server
Documentation= purplemartians.org

[Service]
Type= simple
User= m
ExecStart= /home/m/dev/purple_martians/pm -sh

[Install]
WantedBy= multi-user.target

sudo systemctl daemon-reload

sudo systemctl start pm
sudo systemctl stop pm

sudo systemctl enable pm



---------------------------------------------------------
Remote control and monitoring 
---------------------------------------------------------
From another computer with a display

start purple martians with the option -rc

windows:
pm -rc 

linux
./pm -rc 


---------------------------------------------------------
Forced Settings on headless server
---------------------------------------------------------
void mwNetgame::headless_server_setup(void)
{
   mMain.classic_mode = 0;
   mLevel.unlock_all_levels();

   // ensure that only the basic LOG_NET is active and is printing to console as well as saving to file
   mLog.clear_all_log_actions();
   mLog.set_log_type_action(LOG_NET, LOG_ACTION_PRINT | LOG_ACTION_LOG);

   // make the hidden server player color taan (6)
   mPlayer.syn[0].color = 6;

   // always have session logging on
   mLog.set_log_type_action(LOG_NET_session, LOG_ACTION_LOG);

//   // add these for troubleshooting
//   mLog.set_log_type_action(LOG_NET_join_details, LOG_ACTION_PRINT | LOG_ACTION_LOG);
//   mLog.set_log_type_action(LOG_NET_stak, LOG_ACTION_LOG);
//   mLog.set_log_type_action(LOG_NET_stdf, LOG_ACTION_LOG);
//   mLog.set_log_type_action(LOG_OTH_level_done, LOG_ACTION_PRINT);

   mLog.autosave_log_on_level_done = 1;
   mLog.autosave_log_on_level_quit = 1;
   mLog.autosave_log_on_program_exit = 1;

   // make sure we are always saving games
   mGameMoves.autosave_game_on_level_done = 1;

   mGameMoves.server_send_files_to_clients = 1;

   mConfig.save_config(0);
}


---------------------------------------------------------
Server copies files to clients
---------------------------------------------------------
This section has all been completely changed....

Who initiates this?

It looks like the function:
void mwGameMoves::save_gm(const char *fname)

does it for all clients

 if (mNetgame.ima_server) // if server, send to all active clients
 {
	for (int p=1; p<NUM_PLAYERS; p++)
	   if ((mPlayer.syn[p].active) && (mPlayer.syn[p].control_method == PM_PLAYER_CONTROL_METHOD_NETGAME_REMOTE))
		  mNetgame.server_add_file_to_send(fname, mPlayer.loc[p].who);
 }



it also looks like there is this option:

void mwNetgame::server_proc_crfl_packet(int i)
{
   //printf("rx crfl\n");
   mGameMoves.save_gm_make_fn("server save on rx crfl packet");
}

client can request this in two places


   if (state[1] == PM_PROGRAM_STATE_CLIENT_PREEXIT1)
   {
      if (mGameMoves.autosave_game_on_level_quit)
      {
         // when client quits with escape, send a file request to the server to get the gm file
         mNetgame.client_send_crfl();
         state[0] = PM_PROGRAM_STATE_CLIENT_PREEXIT2;
      }
      else state[0] = PM_PROGRAM_STATE_CLIENT_EXIT;
   }

   if ((mNetgame.ima_client) && (serial_key_test("sendfile"))) mNetgame.client_send_crfl();






---------------------------------------------------------
Setup a cron job to scrape session logs and add to database
---------------------------------------------------------

setup a cron job to scrape session logs and add to database

crontab -e

*/5 * * * * php /home/m/dev/purple_martians/session_scrape.php >> /home/m/dev/purple_martians/cronoutput.txt 2>&1

this is an amazing one line script to change files ending in *.txt.bak to end in *.txt
for f in *.txt.bak; do mv -- "$f" "${f%.txt.bak}.txt"; done


-------------------------------------
Setup ufw firewall on server
-------------------------------------


Making Sure IPv6 is Enabled

In recent versions of Ubuntu, IPv6 is enabled by default. In practice that means most firewall rules added to the server will include both an IPv4 and an IPv6 version, the latter identified by v6 within the output of UFWâ€™s status command. To make sure IPv6 is enabled, you can check your UFW configuration file at /etc/default/ufw. Open this file using nano or your favorite command line editor:

sudo nano /etc/default/ufw
IPV6=yes
this was already set...


sudo ufw show added (for when ufw is not running)

sudo ufw status verbose (for when ufw is running)

sudo ufw enable (do not enable over ssh, until you are sure there is a openssh rule)

m@pmh:~$ sudo ufw app list
Available applications:
  Apache
  Apache Full
  Apache Secure
  OpenSSH
m@pmh:~$
m@pmh:~$ sudo ufw allow OpenSSH
Skipping adding existing rule
Skipping adding existing rule (v6)
m@pmh:~$ sudo ufw show added
Added user rules (see 'ufw status' for running firewall):
ufw allow 22/tcp
ufw allow Apache
ufw allow OpenSSH
m@pmh:~$

m@pmh:~$ sudo ufw enable
Command may disrupt existing ssh connections. Proceed with operation (y|n)? y
Firewall is active and enabled on system startup



To allow netgame to work, I don't need a port forward...IP and port will remain the same...I just need to allow it through....
sudo ufw allow 24785

Now can I make it so that ssh only works on a restricted ip range?
sudo ufw allow from 96.45.0.0/20 to any port 22

m@pmh:~$ sudo ufw status verbose
Status: active
Logging: on (low)
Default: deny (incoming), allow (outgoing), disabled (routed)
New profiles: skip

To                         Action      From
--                         ------      ----
22/tcp                     ALLOW IN    Anywhere
80/tcp (Apache)            ALLOW IN    Anywhere
22/tcp (OpenSSH)           ALLOW IN    Anywhere
24785                      ALLOW IN    Anywhere
22                         ALLOW IN    96.45.0.0/20
22/tcp (v6)                ALLOW IN    Anywhere (v6)
80/tcp (Apache (v6))       ALLOW IN    Anywhere (v6)
22/tcp (OpenSSH (v6))      ALLOW IN    Anywhere (v6)
24785 (v6)                 ALLOW IN    Anywhere (v6)



Deleting Rules

sudo ufw status numbered
sudo ufw delete 2

m@pmh:~$ sudo ufw status numbered
Status: active

     To                         Action      From
     --                         ------      ----
[ 1] Apache                     ALLOW IN    Anywhere
[ 2] 24785                      ALLOW IN    Anywhere
[ 3] 22                         ALLOW IN    96.45.0.0/20
[ 4] Apache (v6)                ALLOW IN    Anywhere (v6)
[ 5] 24785 (v6)                 ALLOW IN    Anywhere (v6)

I should not be able to ssh in from something outside the subnet



now that I have asp3 built again, test that tether to the phone...

it is blocked on ssh, but the game works fine...

I can see ufw blocking in journalctl....








